name: Auto Deploy n8n

on:
  push:
    branches: [ master ]
    paths:
      - 'docker-compose.yml'
      - 'docker-compose.override.yml'
      - 'cloudflared-config/**'
      - 'workflows/**'
      - '.github/workflows/**'
  workflow_dispatch:
    # Cho phép kích hoạt thủ công

jobs:
  deploy:
    runs-on: self-hosted  # Chỉ định sử dụng self-hosted runner thay vì ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file from secrets
        run: |
          echo "Creating .env file..."
          
          # Luôn sử dụng khóa mã hóa từ GitHub Secrets
          N8N_ENCRYPTION_KEY_VALUE="${{ secrets.N8N_ENCRYPTION_KEY }}"
          echo "🔑 Sử dụng khóa mã hóa từ GitHub Secrets"
          echo "$N8N_ENCRYPTION_KEY_VALUE"
          
          # Tạo file .env từ GitHub Secrets và Variables
          cat > .env << EOF
          # PostgreSQL
          POSTGRES_USER=${{ secrets.POSTGRES_USER || 'n8n' }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB || 'n8n_database' }}
          
          # n8n
          N8N_BASIC_AUTH_USER=${{ secrets.N8N_BASIC_AUTH_USER || 'admin' }}
          N8N_BASIC_AUTH_PASSWORD=${{ secrets.N8N_BASIC_AUTH_PASSWORD }}
          N8N_ENCRYPTION_KEY=$N8N_ENCRYPTION_KEY_VALUE
          DB_POSTGRESDB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          WEBHOOK_URL=${{ vars.WEBHOOK_URL }}
          
          # Timezone & other settings
          GENERIC_TIMEZONE=${{ secrets.GENERIC_TIMEZONE || 'Asia/Ho_Chi_Minh' }}
          TZ=${{ secrets.TZ || 'Asia/Ho_Chi_Minh' }}
          N8N_DEFAULT_BINARY_DATA_MODE=${{ secrets.N8N_DEFAULT_BINARY_DATA_MODE || 'filesystem' }}
          EXECUTIONS_DATA_PRUNE=${{ secrets.EXECUTIONS_DATA_PRUNE || 'true' }}
          EXECUTIONS_DATA_MAX_AGE=${{ secrets.EXECUTIONS_DATA_MAX_AGE || '720' }}
          EXECUTIONS_DATA_PRUNE_MAX_COUNT=${{ secrets.EXECUTIONS_DATA_PRUNE_MAX_COUNT || '50000' }}
          
          # Cloudflare Tunnel
          CLOUDFLARE_TUNNEL_TOKEN=${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
          N8N_DOMAIN=${{ vars.N8N_DOMAIN }}
          EOF
          
          # Hiển thị thông báo thành công (không hiển thị nội dung của file vì bảo mật)
          echo "✅ .env file created successfully"
          
          # Kiểm tra xem file đã tồn tại chưa
          if [ -f .env ]; then
            echo "✅ .env file exists"
          else
            echo "❌ Failed to create .env file"
            exit 1
          fi

      - name: Deploy n8n
        run: |
          echo "Deploying n8n..."
          
          # Thực hiện pull và restart
          echo "Running docker-compose commands..."
          echo "Running docker-compose down:"
          docker-compose down
          echo "Down exit code: $?"
          echo "Running docker-compose pull:"
          docker-compose pull
          echo "Pull exit code: $?"
          echo "Running docker-compose up -d:"
          docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
          echo "Up exit code: $?"
          
      # Gửi thông báo Telegram (luôn gửi dù thành công hay thất bại)
      - name: Send notification
        if: always()  # Thay đổi từ success() thành always() để luôn gửi thông báo
        run: |
          if [[ ! -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" && ! -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
            # Tạo link đến GitHub Action run hiện tại
            ACTION_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            
            # Kiểm tra trạng thái của job
            if [ "${{ job.status }}" == "success" ]; then
              # Thông báo thành công
              STATUS_EMOJI="✅"
              STATUS_TEXT="Deployed n8n successfully!"
            else
              # Thông báo thất bại
              STATUS_EMOJI="❌"
              STATUS_TEXT="Deployment n8n failed!"
            fi
            
            # Gửi thông báo tới Telegram sử dụng JSON để đảm bảo xuống dòng hoạt động chính xác
            curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
                "text": "'"$STATUS_EMOJI"' *'"$STATUS_TEXT"'*\n [View Deployment Details]('"$ACTION_URL"')",
                "parse_mode": "Markdown"
              }'
          fi