name: Auto Deploy n8n

on:
  push:
    branches: [ master, develop, staging ]
  workflow_dispatch:
    # Cho ph√©p k√≠ch ho·∫°t th·ªß c√¥ng

# Chia group concurrency theo t·ª´ng branch (m·ªói branch s·∫Ω c√≥ h√†ng ƒë·ª£i ri√™ng)
# N·∫øu c√≥ workflow m·ªõi tr√™n c√πng m·ªôt branch, workflow c≈© s·∫Ω b·ªã cancel, ch·ªâ gi·ªØ l·∫°i workflow m·ªõi nh·∫•t
concurrency:
  group: n8n-deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: self-hosted  # Ch·ªâ ƒë·ªãnh s·ª≠ d·ª•ng self-hosted runner thay v√¨ ubuntu-latest
    environment: ${{ github.ref_name == 'master' && 'production' ||  github.ref_name == 'develop' && 'development' ||  github.ref_name == 'staging' && 'staging' }}
    steps:
      - name: Set deploy dir
        run: echo "DEPLOY_DIR=deploy_${GITHUB_REF_NAME}" >> $GITHUB_ENV

      - name: Prepare deploy dir
        run: mkdir -p $DEPLOY_DIR

      - name: Clean runner temp env files
        run: |
          rm -f $RUNNER_WORKSPACE/_temp/*

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ${{ env.DEPLOY_DIR }}

      - name: Prepare n8n directories
        run: |
          # T·∫°o th∆∞ m·ª•c n8n_data v√† ssh n·∫øu ch∆∞a t·ªìn t·∫°i (kh√¥ng x√≥a d·ªØ li·ªáu c≈©)
          mkdir -p ./n8n_data
          mkdir -p ./ssh
          echo "‚úÖ ƒê√£ chu·∫©n b·ªã th∆∞ m·ª•c, gi·ªØ nguy√™n d·ªØ li·ªáu n8n hi·ªán c√≥"

      - name: Create .env file from secrets
        run: |
          echo "Creating .env file..."
          
          # T·∫°o file .env t·ª´ GitHub Secrets v√† Variables c·ªßa m√¥i tr∆∞·ªùng
          cat > .env << EOF
          # Project name
          COMPOSE_PROJECT_NAME=${{ vars.COMPOSE_PROJECT_NAME || 'n8n' }}
          
          # PostgreSQL
          POSTGRES_USER=${{ secrets.POSTGRES_USER || 'n8n' }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB || 'n8n_database' }}
          POSTGRES_EXTERNAL_PORT=${{ vars.POSTGRES_EXTERNAL_PORT || '5432' }}
          
          # n8n
          N8N_BASIC_AUTH_USER=${{ secrets.N8N_BASIC_AUTH_USER || 'admin' }}
          N8N_BASIC_AUTH_PASSWORD=${{ secrets.N8N_BASIC_AUTH_PASSWORD }}
          N8N_ENCRYPTION_KEY=${{ secrets.N8N_ENCRYPTION_KEY }}
          DB_POSTGRESDB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          WEBHOOK_URL=${{ vars.WEBHOOK_URL }}
          N8N_EXTERNAL_PORT=${{ vars.N8N_EXTERNAL_PORT || '5678' }}

          # Excel API
          EXCEL_API_HTTP_PORT=${{ vars.EXCEL_API_HTTP_PORT || '8080' }}
          EXCEL_API_HTTPS_PORT=${{ vars.EXCEL_API_HTTPS_PORT || '8443' }}
          
          # Timezone & other settings
          GENERIC_TIMEZONE=${{ secrets.GENERIC_TIMEZONE || 'Asia/Ho_Chi_Minh' }}
          TZ=${{ secrets.TZ || 'Asia/Ho_Chi_Minh' }}
          N8N_DEFAULT_BINARY_DATA_MODE=${{ secrets.N8N_DEFAULT_BINARY_DATA_MODE || 'filesystem' }}
          EXECUTIONS_DATA_PRUNE=${{ secrets.EXECUTIONS_DATA_PRUNE || 'true' }}
          EXECUTIONS_DATA_MAX_AGE=${{ secrets.EXECUTIONS_DATA_MAX_AGE || '720' }}
          EXECUTIONS_DATA_PRUNE_MAX_COUNT=${{ secrets.EXECUTIONS_DATA_PRUNE_MAX_COUNT || '50000' }}
          
          # Backup settings
          N8N_BACKUP_DIR_HOST=${{ secrets.N8N_BACKUP_DIR_HOST }}
          EOF
          
          # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng (kh√¥ng hi·ªÉn th·ªã n·ªôi dung c·ªßa file v√¨ b·∫£o m·∫≠t)
          echo "‚úÖ .env file created successfully"
          
          # Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i ch∆∞a
          if [ -f .env ]; then
            echo "‚úÖ .env file exists"
          else
            echo "‚ùå Failed to create .env file"
            exit 1
          fi
        working-directory: ${{ env.DEPLOY_DIR }}

      - name: Chu·∫©n b·ªã m√¥i tr∆∞·ªùng v√† config n8n
        run: |
          echo "üßπ ƒêang chu·∫©n b·ªã m√¥i tr∆∞·ªùng..."
          # T·∫°o th∆∞ m·ª•c n8n_data n·∫øu ch∆∞a c√≥
          if [ ! -d "./n8n_data" ]; then
            mkdir -p ./n8n_data
            echo "‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c n8n_data"
          fi
          # Sao l∆∞u file config n·∫øu c√≥
          if [ -f "./n8n_data/config" ]; then
            echo "üì¶ Sao l∆∞u file config hi·ªán t·∫°i..."
            cp "./n8n_data/config" "./n8n_data/config.bak"
            echo "‚úÖ ƒê√£ sao l∆∞u file config"
          fi
          # Ki·ªÉm tra file config c√≥ ch√∫ th√≠ch kh√¥ng mong mu·ªën kh√¥ng
          CONFIG_ISSUE=false
          if [ -f "./n8n_data/config" ]; then
            if grep -q "# <<<=== THAY B·∫∞NG KH√ìA M·∫†NH C·ª¶A B·∫†N" "./n8n_data/config"; then
              echo "‚ö†Ô∏è Ph√°t hi·ªán ch√∫ th√≠ch kh√¥ng mong mu·ªën trong file config hi·ªán t·∫°i"
              CONFIG_ISSUE=true
            fi
          fi
          # Ch·ªâ t·∫°o file config m·ªõi n·∫øu kh√¥ng t·ªìn t·∫°i ho·∫∑c c√≥ v·∫•n ƒë·ªÅ
          if [ ! -f "./n8n_data/config" ] || [ "$CONFIG_ISSUE" = true ]; then
            if [ -f ".env" ]; then
              CLEAN_KEY=$(grep "N8N_ENCRYPTION_KEY" .env | cut -d '=' -f2 | xargs)
              if [ ! -z "$CLEAN_KEY" ]; then
                echo "üìù T·∫°o file config v·ªõi encryptionKey t·ª´ .env..."
                echo "{\"encryptionKey\": \"$CLEAN_KEY\"}" > ./n8n_data/config
                echo "‚úÖ ƒê√£ t·∫°o file config m·ªõi"
              else
                echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y N8N_ENCRYPTION_KEY trong file .env"
              fi
            else
              echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .env"
            fi
          else
            echo "‚úÖ File config hi·ªán t·∫°i kh√¥ng c√≥ v·∫•n ƒë·ªÅ, gi·ªØ nguy√™n"
          fi
        working-directory: ${{ env.DEPLOY_DIR }}

      - name: Pull v√† build docker images
        run: |
          echo "üîÑ ƒêang pull images m·ªõi nh·∫•t..."
          docker-compose pull
          echo "‚úÖ ƒê√£ pull images th√†nh c√¥ng"
          echo "üî® ƒêang build images cho t·∫•t c·∫£ c√°c d·ªãch v·ª•..."
          docker-compose build
          echo "‚úÖ ƒê√£ build images th√†nh c√¥ng"
        working-directory: ${{ env.DEPLOY_DIR }}

      - name: D·ª´ng v√† x√≥a container c≈© (n·∫øu c√≥)
        run: |
          echo "‚èπÔ∏è D·ª´ng containers hi·ªán t·∫°i..."
          docker-compose down || true
          echo "‚úÖ ƒê√£ d·ª´ng c√°c containers hi·ªán t·∫°i"

      - name: Kh·ªüi ƒë·ªông l·∫°i n8n
        run: |
          docker-compose -f docker-compose.yml up -d
          echo "‚úÖ ƒê√£ kh·ªüi ƒë·ªông containers th√†nh c√¥ng"
          echo "‚è≥ ƒêang ƒë·ª£i n8n kh·ªüi ƒë·ªông..."
          sleep 15
        working-directory: ${{ env.DEPLOY_DIR }}

      - name: Ki·ªÉm tra tr·∫°ng th√°i c√°c container
        run: |
          docker-compose ps
        working-directory: ${{ env.DEPLOY_DIR }}

      - name: Hi·ªÉn th·ªã URL truy c·∫≠p n8n
        run: |
          echo "üåê n8n ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai th√†nh c√¥ng v√† c√≥ th·ªÉ truy c·∫≠p t·∫°i:"
          echo "   http://localhost:5678"
          if [ ! -z "$WEBHOOK_URL" ]; then
            echo "   ho·∫∑c: $WEBHOOK_URL"
          fi
          echo "‚úÖ TRI·ªÇN KHAI N8N HO√ÄN T·∫§T TH√ÄNH C√îNG"

      # G·ª≠i th√¥ng b√°o Telegram (lu√¥n g·ª≠i d√π th√†nh c√¥ng hay th·∫•t b·∫°i)
      - name: Send notification
        if: always()  # Thay ƒë·ªïi t·ª´ success() th√†nh always() ƒë·ªÉ lu√¥n g·ª≠i th√¥ng b√°o
        run: |
          if [[ ! -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" && ! -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
            # T·∫°o link ƒë·∫øn GitHub Action run hi·ªán t·∫°i
            ACTION_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            
            # Ki·ªÉm tra tr·∫°ng th√°i c·ªßa job
            if [ "${{ job.status }}" == "success" ]; then
              # Th√¥ng b√°o th√†nh c√¥ng
              STATUS_EMOJI="‚úÖ"
              STATUS_TEXT="Deployed n8n successfully!"
            else
              # Th√¥ng b√°o th·∫•t b·∫°i
              STATUS_EMOJI="‚ùå"
              STATUS_TEXT="Deployment n8n failed!"
            fi
            
            # G·ª≠i th√¥ng b√°o t·ªõi Telegram s·ª≠ d·ª•ng JSON ƒë·ªÉ ƒë·∫£m b·∫£o xu·ªëng d√≤ng ho·∫°t ƒë·ªông ch√≠nh x√°c
            curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
                "text": "'"$STATUS_EMOJI"' *'"$STATUS_TEXT"'*\n [View Deployment Details]('"$ACTION_URL"')",
                "parse_mode": "Markdown"
              }'
          fi