name: Auto Deploy n8n

on:
  push:
    branches: [ master, develop, staging ]
  workflow_dispatch:
    # Cho ph√©p k√≠ch ho·∫°t th·ªß c√¥ng

# Chia group concurrency theo t·ª´ng branch (m·ªói branch s·∫Ω c√≥ h√†ng ƒë·ª£i ri√™ng)
# N·∫øu c√≥ workflow m·ªõi tr√™n c√πng m·ªôt branch, workflow c≈© s·∫Ω b·ªã cancel, ch·ªâ gi·ªØ l·∫°i workflow m·ªõi nh·∫•t
concurrency:
  group: n8n-deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest # S·ª≠ d·ª•ng GitHub-hosted runner
    environment: ${{ github.ref_name == 'master' && 'production' ||  github.ref_name == 'develop' && 'development' ||  github.ref_name == 'staging' && 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # M√£ ngu·ªìn ƒë∆∞·ª£c checkout v√†o kh√¥ng gian l√†m vi·ªác c·ªßa GitHub runner

      - name: Set TrueNAS Deploy Directory Environment Variable
        run: echo "TRUENAS_DEPLOY_DIR=${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${GITHUB_REF_NAME}" >> $GITHUB_ENV
        shell: bash

      - name: Setup Cloudflared and SSH Config
        run: |
          # C√†i ƒë·∫∑t cloudflared
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          echo "Cloudflared version: $(cloudflared --version)" # X√°c minh c√†i ƒë·∫∑t

          # T·∫°o th∆∞ m·ª•c .ssh n·∫øu ch∆∞a t·ªìn t·∫°i
          mkdir -p ~/.ssh
          
          # T·∫°o t·ªáp c·∫•u h√¨nh SSH ƒë·ªÉ s·ª≠ d·ª•ng cloudflared
          # TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED l√† hostname c√¥ng c·ªông c·ªßa tunnel SSH c·ªßa b·∫°n
          # V√≠ d·ª•: ssh.yourdomain.com
          # Host alias (v√≠ d·ª•: truenas-cf-tunnel) l√† m·ªôt nh√£n cho kh·ªëi c·∫•u h√¨nh SSH n√†y
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            # IdentityFile s·∫Ω ƒë∆∞·ª£c ssh-agent qu·∫£n l√Ω
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR" > ~/.ssh/config # Th√™m LogLevel ERROR ƒë·ªÉ gi·∫£m output
          
          chmod 600 ~/.ssh/config
          echo "‚úÖ SSH config for Cloudflared created."
        shell: bash

      - name: Add TrueNAS SSH Private Key to SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: Prepare deploy directory on TrueNAS
        run: |
          # S·ª≠ d·ª•ng alias 'truenas-cf-tunnel' ƒë√£ c·∫•u h√¨nh
          ssh truenas-cf-tunnel << EOF
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}
            echo "‚úÖ Prepared TrueNAS deploy directory: ${{ env.TRUENAS_DEPLOY_DIR }}"
          EOF
        shell: bash

      - name: Sync project files to TrueNAS
        run: |
          # S·ª≠ d·ª•ng alias 'truenas-cf-tunnel' v√† ch·ªâ ƒë·ªãnh t·ªáp c·∫•u h√¨nh SSH r√µ r√†ng cho rsync
          rsync -avz -e "ssh -F ~/.ssh/config" \
            --exclude '.git/' \
            --exclude '.github/' \
            --exclude 'README-Self-Hosted-Runner.md' \
            --delete \
            $GITHUB_WORKSPACE/ \
            truenas-cf-tunnel:"${{ env.TRUENAS_DEPLOY_DIR }}/" # ƒê·∫£m b·∫£o c√≥ d·∫•u / ·ªü cu·ªëi cho th∆∞ m·ª•c ƒë√≠ch
          echo "‚úÖ Project files synced to TrueNAS"
        shell: bash

      - name: Create .env file on TrueNAS
        run: |
          # C√°c bi·∫øn s·∫Ω ƒë∆∞·ª£c GitHub Actions thay th·∫ø tr∆∞·ªõc khi l·ªánh ƒë∆∞·ª£c g·ª≠i qua SSH.
          # ƒê·∫£m b·∫£o c√°c gi√° tr·ªã secret ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát ƒë∆∞·ª£c ƒë·∫∑t trong d·∫•u nh√°y ƒë∆°n tr√™n m√°y ch·ªß t·ª´ xa.
          ssh truenas-cf-tunnel "cat > ${{ env.TRUENAS_DEPLOY_DIR }}/.env <<EOF
          # Project name
          COMPOSE_PROJECT_NAME=${{ vars.COMPOSE_PROJECT_NAME || 'n8n' }}
          # PostgreSQL
          POSTGRES_USER=${{ secrets.POSTGRES_USER || 'n8n' }}
          POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}'
          POSTGRES_DB=${{ secrets.POSTGRES_DB || 'n8n_database' }}
          POSTGRES_EXTERNAL_PORT=${{ vars.POSTGRES_EXTERNAL_PORT || '5432' }}
          # n8n
          N8N_BASIC_AUTH_USER=${{ secrets.N8N_BASIC_AUTH_USER || 'admin' }}
          N8N_BASIC_AUTH_PASSWORD='${{ secrets.N8N_BASIC_AUTH_PASSWORD }}'
          N8N_ENCRYPTION_KEY='${{ secrets.N8N_ENCRYPTION_KEY }}'
          DB_POSTGRESDB_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' # Th∆∞·ªùng gi·ªëng POSTGRES_PASSWORD
          WEBHOOK_URL=${{ vars.WEBHOOK_URL }}
          N8N_EXTERNAL_PORT=${{ vars.N8N_EXTERNAL_PORT || '5678' }}
          # Excel API
          EXCEL_API_HTTP_PORT=${{ vars.EXCEL_API_HTTP_PORT || '8080' }}
          EXCEL_API_HTTPS_PORT=${{ vars.EXCEL_API_HTTPS_PORT || '8443' }}
          # Timezone & other settings
          GENERIC_TIMEZONE=${{ secrets.GENERIC_TIMEZONE || 'Asia/Ho_Chi_Minh' }}
          TZ=${{ secrets.TZ || 'Asia/Ho_Chi_Minh' }}
          N8N_DEFAULT_BINARY_DATA_MODE=${{ secrets.N8N_DEFAULT_BINARY_DATA_MODE || 'filesystem' }}
          EXECUTIONS_DATA_PRUNE=${{ secrets.EXECUTIONS_DATA_PRUNE || 'true' }}
          EXECUTIONS_DATA_MAX_AGE=${{ secrets.EXECUTIONS_DATA_MAX_AGE || '720' }}
          EXECUTIONS_DATA_PRUNE_MAX_COUNT=${{ secrets.EXECUTIONS_DATA_PRUNE_MAX_COUNT || '50000' }}
          # Backup settings
          N8N_BACKUP_DIR_HOST=${{ secrets.N8N_BACKUP_DIR_HOST }} # ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi tr√™n TrueNAS
          EOF
          echo '‚úÖ .env file created on TrueNAS at ${{ env.TRUENAS_DEPLOY_DIR }}/.env'"
        shell: bash

      - name: Prepare n8n host mount directories on TrueNAS
        run: |
          ssh truenas-cf-tunnel << EOF
            # C√°c th∆∞ m·ª•c n√†y d√†nh cho c√°c file ƒë∆∞·ª£c qu·∫£n l√Ω tr·ª±c ti·∫øp trong th∆∞ m·ª•c tri·ªÉn khai,
            # v√≠ d·ª•: ./ssh mount ho·∫∑c n8n_data/config.
            # C√°c Docker named volumes (postgres_data, n8n_data (n·ªôi dung ch√≠nh), redis_data) ƒë∆∞·ª£c Docker qu·∫£n l√Ω.
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/n8n_data # Cho t·ªáp config, n·∫øu ƒë∆∞·ª£c s·ª≠ d·ª•ng
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/ssh      # Cho volume mount ./ssh
            echo "‚úÖ Prepared n8n host mount directories on TrueNAS (within deployment folder)"
          EOF
        shell: bash

      - name: Prepare n8n config file on TrueNAS
        run: |
          ssh truenas-cf-tunnel << EOF
            set -e # Tho√°t n·∫øu c√≥ l·ªói
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            echo "üßπ ƒêang chu·∫©n b·ªã m√¥i tr∆∞·ªùng cho file config n8n..."
            # Logic n√†y thao t√°c v·ªõi t·ªáp ${{ env.TRUENAS_DEPLOY_DIR }}/n8n_data/config

            if [ ! -d "./n8n_data" ]; then
              mkdir -p ./n8n_data
              echo "‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c ./n8n_data"
            fi

            if [ -f "./n8n_data/config" ]; then
              echo "üì¶ Sao l∆∞u file config hi·ªán t·∫°i..."
              cp "./n8n_data/config" "./n8n_data/config.bak.\$(date +%Y%m%d_%H%M%S)"
              echo "‚úÖ ƒê√£ sao l∆∞u file config"
            fi

            CONFIG_ISSUE=false
            if [ -f "./n8n_data/config" ]; then
              if grep -q "# <<<=== THAY B·∫∞NG KH√ìA M·∫†NH C·ª¶A B·∫†N" "./n8n_data/config"; then
                echo "‚ö†Ô∏è Ph√°t hi·ªán ch√∫ th√≠ch kh√¥ng mong mu·ªën trong file config hi·ªán t·∫°i"
                CONFIG_ISSUE=true
              fi
            fi

            if [ ! -f "./n8n_data/config" ] || [ "\$CONFIG_ISSUE" = true ]; then
              if [ -f ".env" ]; then
                # ƒê·ªçc N8N_ENCRYPTION_KEY t·ª´ t·ªáp .env tr√™n TrueNAS
                # C·∫ßn tho√°t k√Ω t·ª± $ cho th·ª±c thi t·ª´ xa v√† ƒë·∫£m b·∫£o cut/sed ho·∫°t ƒë·ªông.
                # Lo·∫°i b·ªè d·∫•u nh√°y ƒë∆°n bao quanh gi√° tr·ªã n·∫øu c√≥.
                CLEAN_KEY=\$(grep "N8N_ENCRYPTION_KEY=" .env | cut -d '=' -f2- | sed "s/^'//;s/'\$//")
                if [ ! -z "\$CLEAN_KEY" ] && [ "\$CLEAN_KEY" != "null" ]; then
                  echo "üìù T·∫°o file config v·ªõi encryptionKey t·ª´ .env..."
                  # ƒê·∫£m b·∫£o output JSON ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng ch√≠nh x√°c
                  printf '{"encryptionKey": "%s"}\n' "\$CLEAN_KEY" > ./n8n_data/config
                  echo "‚úÖ ƒê√£ t·∫°o file config m·ªõi t·∫°i ./n8n_data/config"
                else
                  echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y N8N_ENCRYPTION_KEY h·ª£p l·ªá trong file .env ho·∫∑c gi√° tr·ªã r·ªóng/null"
                fi
              else
                echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .env ƒë·ªÉ ƒë·ªçc N8N_ENCRYPTION_KEY"
              fi
            else
              echo "‚úÖ File config hi·ªán t·∫°i kh√¥ng c√≥ v·∫•n ƒë·ªÅ, gi·ªØ nguy√™n"
            fi
          EOF
        shell: bash

      - name: Docker-compose operations on TrueNAS
        run: |
          ssh truenas-cf-tunnel << EOF
            set -e # Tho√°t n·∫øu c√≥ l·ªói
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            echo "üê≥ Working with Docker Compose in ${{ env.TRUENAS_DEPLOY_DIR }}"

            echo "üîÑ ƒêang pull images m·ªõi nh·∫•t..."
            docker-compose pull
            echo "‚úÖ ƒê√£ pull images th√†nh c√¥ng"

            echo "üî® ƒêang build images cho t·∫•t c·∫£ c√°c d·ªãch v·ª• (n·∫øu c√≥ thay ƒë·ªïi)..."
            # Gi·∫£ ƒë·ªãnh ƒë∆∞·ªùng d·∫´n Dockerfile trong docker-compose.yml l√† t∆∞∆°ng ƒë·ªëi v·ªõi TRUENAS_DEPLOY_DIR
            docker-compose build
            echo "‚úÖ ƒê√£ build images th√†nh c√¥ng"

            echo "‚èπÔ∏è  D·ª´ng containers hi·ªán t·∫°i (n·∫øu ƒëang ch·∫°y)..."
            docker-compose down --remove-orphans || true # Cho ph√©p l·ªói n·∫øu kh√¥ng ch·∫°y, x√≥a container m·ªì c√¥i
            echo "‚úÖ ƒê√£ d·ª´ng c√°c containers hi·ªán t·∫°i"

            echo "üöÄ Kh·ªüi ƒë·ªông l·∫°i n8n v√† c√°c d·ªãch v·ª• li√™n quan..."
            # Th√™m c√°c t·ªáp compose kh√°c n·∫øu b·∫°n s·ª≠ d·ª•ng override, v√≠ d·ª•: -f docker-compose.override.yml
            docker-compose -f docker-compose.yml up -d
            echo "‚úÖ ƒê√£ kh·ªüi ƒë·ªông containers th√†nh c√¥ng"

            echo "‚è≥ ƒêang ƒë·ª£i n8n kh·ªüi ƒë·ªông (30 gi√¢y)..."
            sleep 30 # TƒÉng th·ªùi gian ch·ªù ƒë·ªÉ ƒë·∫£m b·∫£o c√°c d·ªãch v·ª• s·∫µn s√†ng

            echo "üìä Ki·ªÉm tra tr·∫°ng th√°i c√°c container..."
            docker-compose ps
          EOF
        shell: bash

      - name: Display n8n URL
        run: |
          # Hi·ªÉn th·ªã URL d·ª±a tr√™n bi·∫øn WEBHOOK_URL ho·∫∑c IP/Port c·ªßa TrueNAS
          # L∆∞u √Ω: TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED l√† cho SSH, kh√¥ng nh·∫•t thi·∫øt l√† cho truy c·∫≠p web n8n.
          # B·∫°n n√™n c√≥ m·ªôt bi·∫øn ri√™ng cho URL web c√¥ng c·ªông c·ªßa n8n n·∫øu n√≥ kh√°c.
          echo "üåê n8n ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai th√†nh c√¥ng tr√™n TrueNAS."
          if [ ! -z "${{ vars.WEBHOOK_URL }}" ]; then
            echo "   Truy c·∫≠p t·∫°i: ${{ vars.WEBHOOK_URL }}"
          else
            # N·∫øu kh√¥ng c√≥ WEBHOOK_URL, b·∫°n c√≥ th·ªÉ c·∫ßn cung c·∫•p IP/hostname c·ªßa TrueNAS v√† port
            echo "   C√≥ th·ªÉ truy c·∫≠p t·∫°i ƒë·ªãa ch·ªâ IP/hostname c·ªßa TrueNAS v√† c·ªïng ${{ vars.N8N_EXTERNAL_PORT || '5678' }}"
            echo "   V√≠ d·ª•: http://<IP_TRUENAS_C·ª¶A_B·∫†N>:${{ vars.N8N_EXTERNAL_PORT || '5678' }}"
          fi
          echo "‚úÖ TRI·ªÇN KHAI N8N HO√ÄN T·∫§T TH√ÄNH C√îNG"
        shell: bash

      - name: Send Telegram notification
        if: always() # Lu√¥n g·ª≠i th√¥ng b√°o, d√π th√†nh c√¥ng hay th·∫•t b·∫°i
        run: |
          if [[ ! -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" && ! -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
            ACTION_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            JOB_STATUS="${{ job.status }}" # L·∫•y tr·∫°ng th√°i c·ªßa job

            if [ "\$JOB_STATUS" == "success" ]; then
              STATUS_EMOJI="‚úÖ"
              STATUS_TEXT="Tri·ªÉn khai n8n l√™n TrueNAS (qua Cloudflared) TH√ÄNH C√îNG!"
            else
              STATUS_EMOJI="‚ùå"
              STATUS_TEXT="Tri·ªÉn khai n8n l√™n TrueNAS (qua Cloudflared) TH·∫§T B·∫†I!"
            fi
            
            # X√¢y d·ª±ng payload JSON c·∫©n th·∫≠n ƒë·ªÉ ƒë·∫£m b·∫£o xu·ªëng d√≤ng v√† Markdown ho·∫°t ƒë·ªông ch√≠nh x√°c
            JSON_PAYLOAD=$(printf '{
              "chat_id": "%s",
              "text": "%s *%s*\\nNh√°nh: %s\\n[Xem Chi Ti·∫øt Tri·ªÉn Khai](%s)",
              "parse_mode": "Markdown"
            }' \
            "${{ secrets.TELEGRAM_CHAT_ID }}" \
            "$STATUS_EMOJI" \
            "$STATUS_TEXT" \
            "${{ github.ref_name }}" \
            "$ACTION_URL")

            curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
              -H "Content-Type: application/json" \
              -d "\$JSON_PAYLOAD"
            echo "‚ÑπÔ∏è Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i (ho·∫∑c c·ªë g·∫Øng g·ª≠i)."
          else
            echo "‚ö†Ô∏è Bi·∫øn Telegram (BOT_TOKEN ho·∫∑c CHAT_ID) ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t. B·ªè qua th√¥ng b√°o."
          fi
        shell: bash

