name: Auto Deploy n8n

on:
  push:
    branches: [ master, develop, staging ]
  workflow_dispatch:
    # Cho ph√©p k√≠ch ho·∫°t th·ªß c√¥ng

# Chia group concurrency theo t·ª´ng branch (m·ªói branch s·∫Ω c√≥ h√†ng ƒë·ª£i ri√™ng)
# N·∫øu c√≥ workflow m·ªõi tr√™n c√πng m·ªôt branch, workflow c≈© s·∫Ω b·ªã cancel, ch·ªâ gi·ªØ l·∫°i workflow m·ªõi nh·∫•t
concurrency:
  group: n8n-deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest # S·ª≠ d·ª•ng GitHub-hosted runner
    environment: ${{ github.ref_name == 'master' && 'production' ||  github.ref_name == 'develop' && 'development' ||  github.ref_name == 'staging' && 'staging' }}
    # ƒê·∫∑t th·ªùi gian timeout cho to√†n b·ªô job n√†y l√† 30 ph√∫t
    timeout-minutes: 30 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set TrueNAS Deploy Directory Environment Variable
        run: echo "TRUENAS_DEPLOY_DIR=${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${GITHUB_REF_NAME}" >> $GITHUB_ENV
        shell: bash

      - name: Setup Cloudflared and SSH Config
        run: |
          echo "Runner HOME directory is: $HOME" # In th∆∞ m·ª•c nh√†
          # C√†i ƒë·∫∑t cloudflared
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          echo "Cloudflared version: $(cloudflared --version)"

          # T·∫°o th∆∞ m·ª•c $HOME/.ssh n·∫øu ch∆∞a t·ªìn t·∫°i
          mkdir -p "$HOME/.ssh"
          
          # T·∫°o t·ªáp c·∫•u h√¨nh SSH s·ª≠ d·ª•ng $HOME
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR" > "$HOME/.ssh/config" # S·ª≠ d·ª•ng $HOME
          
          chmod 600 "$HOME/.ssh/config"
          echo "‚úÖ SSH config for Cloudflared created at $HOME/.ssh/config"
        shell: bash

      - name: Add TrueNAS SSH Private Key to SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: DEBUG - Verify SSH Config File
        run: |
          echo "--- Verifying SSH config file ---"
          if [ -f "$HOME/.ssh/config" ]; then
            echo "‚úÖ SSH Config file exists at $HOME/.ssh/config"
            echo "--- Contents of $HOME/.ssh/config ---"
            cat "$HOME/.ssh/config"
            echo "-------------------------------------"
            echo "--- Listing $HOME/.ssh directory ---"
            ls -la "$HOME/.ssh"
            echo "------------------------------------"
          else
            echo "‚ùå SSH Config file NOT FOUND at $HOME/.ssh/config"
            # C·ªë g·∫Øng li·ªát k√™ th∆∞ m·ª•c $HOME n·∫øu c√≥ th·ªÉ ƒë·ªÉ xem c·∫•u tr√∫c
            echo "--- Listing $HOME directory ---"
            ls -la "$HOME"
            echo "-------------------------------"
            exit 1 # G√¢y l·ªói n·∫øu t·ªáp kh√¥ng t·ªìn t·∫°i
          fi
        shell: bash

      - name: Prepare deploy directory on TrueNAS
        run: |
          # S·ª≠ d·ª•ng alias 'truenas-cf-tunnel' ƒë√£ c·∫•u h√¨nh
          # Th√™m -F "$HOME/.ssh/config" v√†o l·ªánh ssh ƒë·ªÉ ch·ªâ ƒë·ªãnh r√µ r√†ng
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}
            echo "‚úÖ Prepared TrueNAS deploy directory: ${{ env.TRUENAS_DEPLOY_DIR }}"
          EOF
        shell: bash

      - name: Sync project files to TrueNAS
        run: |
          # S·ª≠ d·ª•ng alias 'truenas-cf-tunnel' v√† ch·ªâ ƒë·ªãnh t·ªáp c·∫•u h√¨nh SSH r√µ r√†ng cho rsync
          # v·ªõi $HOME
          rsync -avz -e "ssh -F $HOME/.ssh/config" \
            --exclude '.git/' \
            --exclude '.github/' \
            --exclude 'README-Self-Hosted-Runner.md' \
            --delete \
            $GITHUB_WORKSPACE/ \
            truenas-cf-tunnel:"${{ env.TRUENAS_DEPLOY_DIR }}/"
          echo "‚úÖ Project files synced to TrueNAS"
        shell: bash

      - name: Create .env file on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel "cat > ${{ env.TRUENAS_DEPLOY_DIR }}/.env <<EOF
          # Project name
          COMPOSE_PROJECT_NAME=${{ vars.COMPOSE_PROJECT_NAME || 'n8n' }}
          # PostgreSQL
          POSTGRES_USER=${{ secrets.POSTGRES_USER || 'n8n' }}
          POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}'
          POSTGRES_DB=${{ secrets.POSTGRES_DB || 'n8n_database' }}
          POSTGRES_EXTERNAL_PORT=${{ vars.POSTGRES_EXTERNAL_PORT || '5432' }}
          # n8n
          N8N_BASIC_AUTH_USER=${{ secrets.N8N_BASIC_AUTH_USER || 'admin' }}
          N8N_BASIC_AUTH_PASSWORD='${{ secrets.N8N_BASIC_AUTH_PASSWORD }}'
          N8N_ENCRYPTION_KEY='${{ secrets.N8N_ENCRYPTION_KEY }}'
          DB_POSTGRESDB_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}'
          WEBHOOK_URL=${{ vars.WEBHOOK_URL }}
          N8N_EXTERNAL_PORT=${{ vars.N8N_EXTERNAL_PORT || '5678' }}
          # Excel API
          EXCEL_API_HTTP_PORT=${{ vars.EXCEL_API_HTTP_PORT || '8080' }}
          EXCEL_API_HTTPS_PORT=${{ vars.EXCEL_API_HTTPS_PORT || '8443' }}
          # Discord Bot Configuration
          DISCORD_TOKEN='${{ secrets.DISCORD_TOKEN }}'
          DISCORD_N8N_WEBHOOK_URL=${{ vars.DISCORD_N8N_WEBHOOK_URL || 'http://n8n:5678/webhook/discord-event' }}
          DISCORD_BOT_PREFIX=${{ vars.DISCORD_BOT_PREFIX || '!' }}
          DISCORD_ENABLE_MESSAGE_LOGGING=${{ vars.DISCORD_ENABLE_MESSAGE_LOGGING || 'true' }}
          DISCORD_ENABLE_MEMBER_JOIN_LOGGING=${{ vars.DISCORD_ENABLE_MEMBER_JOIN_LOGGING || 'true' }}
          DISCORD_LOG_LEVEL=${{ vars.DISCORD_LOG_LEVEL || 'info' }}
          DISCORD_GUILD_ID=${{ vars.DISCORD_GUILD_ID || '' }}
          # Timezone & other settings
          GENERIC_TIMEZONE=${{ secrets.GENERIC_TIMEZONE || 'Asia/Ho_Chi_Minh' }}
          TZ=${{ secrets.TZ || 'Asia/Ho_Chi_Minh' }}
          N8N_DEFAULT_BINARY_DATA_MODE=${{ secrets.N8N_DEFAULT_BINARY_DATA_MODE || 'filesystem' }}
          EXECUTIONS_DATA_PRUNE=${{ secrets.EXECUTIONS_DATA_PRUNE || 'true' }}
          EXECUTIONS_DATA_MAX_AGE=${{ secrets.EXECUTIONS_DATA_MAX_AGE || '720' }}
          EXECUTIONS_DATA_PRUNE_MAX_COUNT=${{ secrets.EXECUTIONS_DATA_PRUNE_MAX_COUNT || '50000' }}
          # Backup settings
          N8N_BACKUP_DIR_HOST=${{ secrets.N8N_BACKUP_DIR_HOST }}
          IP_PREFIX=${{ vars.IP_PREFIX }}
          TRUENAS_DEPLOY_DIR=${{ vars.TRUENAS_DEPLOY_DIR }}
          EOF
          echo '‚úÖ .env file created on TrueNAS at ${{ env.TRUENAS_DEPLOY_DIR }}/.env'"
        shell: bash

      - name: Prepare n8n host mount directories on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/n8n_data
            mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}/ssh
            echo "‚úÖ Prepared n8n host mount directories on TrueNAS (within deployment folder)"
          EOF
        shell: bash

      - name: Prepare n8n config file on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            set -e 
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            echo "üßπ ƒêang chu·∫©n b·ªã m√¥i tr∆∞·ªùng cho file config n8n..."
            if [ ! -d "./n8n_data" ]; then
              mkdir -p ./n8n_data
              echo "‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c ./n8n_data"
            fi
            if [ -f "./n8n_data/config" ]; then
              echo "üì¶ Sao l∆∞u file config hi·ªán t·∫°i..."
              cp "./n8n_data/config" "./n8n_data/config.bak.\$(date +%Y%m%d_%H%M%S)"
              echo "‚úÖ ƒê√£ sao l∆∞u file config"
            fi
            CONFIG_ISSUE=false
            if [ -f "./n8n_data/config" ]; then
              if grep -q "# <<<=== THAY B·∫∞NG KH√ìA M·∫†NH C·ª¶A B·∫†N" "./n8n_data/config"; then
                echo "‚ö†Ô∏è Ph√°t hi·ªán ch√∫ th√≠ch kh√¥ng mong mu·ªën trong file config hi·ªán t·∫°i"
                CONFIG_ISSUE=true
              fi
            fi
            if [ ! -f "./n8n_data/config" ] || [ "\$CONFIG_ISSUE" = true ]; then
              if [ -f ".env" ]; then
                CLEAN_KEY=\$(grep "N8N_ENCRYPTION_KEY=" .env | cut -d '=' -f2- | sed "s/^'//;s/'\$//")
                if [ ! -z "\$CLEAN_KEY" ] && [ "\$CLEAN_KEY" != "null" ]; then
                  echo "üìù T·∫°o file config v·ªõi encryptionKey t·ª´ .env..."
                  printf '{"encryptionKey": "%s"}\n' "\$CLEAN_KEY" > ./n8n_data/config
                  echo "‚úÖ ƒê√£ t·∫°o file config m·ªõi t·∫°i ./n8n_data/config"
                else
                  echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y N8N_ENCRYPTION_KEY h·ª£p l·ªá trong file .env ho·∫∑c gi√° tr·ªã r·ªóng/null"
                fi
              else
                echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .env ƒë·ªÉ ƒë·ªçc N8N_ENCRYPTION_KEY"
              fi
            else
              echo "‚úÖ File config hi·ªán t·∫°i kh√¥ng c√≥ v·∫•n ƒë·ªÅ, gi·ªØ nguy√™n"
            fi
          EOF
        shell: bash

      - name: docker compose operations on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            set -e 
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            echo "üê≥ Working with Docker Compose in ${{ env.TRUENAS_DEPLOY_DIR }}"
            echo "üîÑ ƒêang pull images m·ªõi nh·∫•t..."
            docker compose pull
            echo "‚úÖ ƒê√£ pull images th√†nh c√¥ng"
            echo "üî® ƒêang build images cho t·∫•t c·∫£ c√°c d·ªãch v·ª• (n·∫øu c√≥ thay ƒë·ªïi)..."
            docker compose build
            echo "‚úÖ ƒê√£ build images th√†nh c√¥ng"
            echo "‚èπÔ∏è  D·ª´ng containers hi·ªán t·∫°i (n·∫øu ƒëang ch·∫°y)..."
            docker compose down --remove-orphans || true 
            echo "‚úÖ ƒê√£ d·ª´ng c√°c containers hi·ªán t·∫°i"
            echo "üöÄ Kh·ªüi ƒë·ªông l·∫°i n8n v√† c√°c d·ªãch v·ª• li√™n quan..."
            docker compose up -d
            echo "‚úÖ ƒê√£ kh·ªüi ƒë·ªông containers th√†nh c√¥ng"
            echo "‚è≥ ƒêang ƒë·ª£i n8n kh·ªüi ƒë·ªông (30 gi√¢y)..."
            sleep 30
            echo "üìä Ki·ªÉm tra tr·∫°ng th√°i c√°c container..."
            docker compose ps
          EOF
        shell: bash

      - name: Verify Discord Bot deployment
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            set -e 
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            echo "ü§ñ Ki·ªÉm tra tr·∫°ng th√°i Discord Bot..."
            
            # Ki·ªÉm tra container Discord bot c√≥ ch·∫°y kh√¥ng
            if docker compose ps discord-bot | grep -q "Up"; then
              echo "‚úÖ Discord Bot container ƒëang ch·∫°y"
              
              # Ki·ªÉm tra logs ƒë·ªÉ xem bot c√≥ k·∫øt n·ªëi th√†nh c√¥ng kh√¥ng
              echo "üìã Logs Discord Bot (10 d√≤ng cu·ªëi):"
              docker compose logs --tail=10 discord-bot
              
              # Ki·ªÉm tra xem c√≥ l·ªói k·∫øt n·ªëi kh√¥ng
              if docker compose logs discord-bot | grep -q "Bot ƒë√£ online"; then
                echo "‚úÖ Discord Bot ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng"
              else
                echo "‚ö†Ô∏è Discord Bot ch∆∞a k·∫øt n·ªëi ho·∫∑c c√≥ l·ªói - ki·ªÉm tra DISCORD_TOKEN"
              fi
            else
              echo "‚ùå Discord Bot container kh√¥ng ch·∫°y"
              echo "üìã Logs Discord Bot ƒë·ªÉ debug:"
              docker compose logs discord-bot
              exit 1
            fi
            
            echo "üîç T·ªïng quan tr·∫°ng th√°i t·∫•t c·∫£ services:"
            docker compose ps
          EOF
        shell: bash

      - name: Display deployment information
        run: |
          echo "üåê n8n v√† Discord Bot ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai th√†nh c√¥ng tr√™n TrueNAS."
          echo ""
          echo "üìä Th√¥ng tin tri·ªÉn khai:"
          echo "  üîπ n8n:"
          if [ ! -z "${{ vars.WEBHOOK_URL }}" ]; then
            echo "     Truy c·∫≠p t·∫°i: ${{ vars.WEBHOOK_URL }}"
          else
            echo "     C√≥ th·ªÉ truy c·∫≠p t·∫°i: http://<IP_TRUENAS>:${{ vars.N8N_EXTERNAL_PORT || '5678' }}"
          fi
          echo "  üîπ Discord Bot:"
          echo "     Webhook endpoint: ${{ vars.DISCORD_N8N_WEBHOOK_URL || 'http://n8n:5678/webhook/discord-event' }}"
          echo "     Log level: ${{ vars.DISCORD_LOG_LEVEL || 'info' }}"
          if [ ! -z "${{ vars.DISCORD_GUILD_ID }}" ]; then
            echo "     Gi·ªõi h·∫°n server: ${{ vars.DISCORD_GUILD_ID }}"
          else
            echo "     Ho·∫°t ƒë·ªông tr√™n: T·∫•t c·∫£ servers"
          fi
          echo ""
          echo "‚úÖ TRI·ªÇN KHAI HO√ÄN T·∫§T TH√ÄNH C√îNG"
        shell: bash
        
      - name: Send Discord success/failure notification
        if: success() || failure()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ${{ job.status == 'success' && '‚úÖ **Tri·ªÉn khai n8n + Discord Bot l√™n TrueNAS TH√ÄNH C√îNG!**' || '‚ùå **Tri·ªÉn khai n8n + Discord Bot l√™n TrueNAS TH·∫§T B·∫†I!**' }}
            
            üìä **Th√¥ng tin tri·ªÉn khai:**
            ‚Ä¢ **Nh√°nh:** `${{ github.ref_name }}`
            ‚Ä¢ **n8n:** ${{ vars.WEBHOOK_URL || 'http://<IP_TRUENAS>:5678' }}
            ‚Ä¢ **Discord Bot:** ${{ job.status == 'success' && 'ƒê√£ kh·ªüi ƒë·ªông v√† k·∫øt n·ªëi' || 'L·ªói kh·ªüi ƒë·ªông' }}
            ‚Ä¢ **Webhook:** `${{ vars.DISCORD_N8N_WEBHOOK_URL || 'http://n8n:5678/webhook/discord-event' }}`
            
            [üìã Xem Chi Ti·∫øt Deploy](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Send Discord timeout notification
        if: cancelled()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ‚è±Ô∏è **Tri·ªÉn khai n8n + Discord Bot ƒê√É B·ªä H·ª¶Y do timeout (> 30 ph√∫t)!**
            
            üìä **Th√¥ng tin:**
            ‚Ä¢ **Nh√°nh:** `${{ github.ref_name }}`
            ‚Ä¢ **Th·ªùi gian:** V∆∞·ª£t qu√° 30 ph√∫t
            
            [üìã Xem Chi Ti·∫øt Deploy](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

