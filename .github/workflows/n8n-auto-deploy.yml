name: Auto Deploy n8n

on:
  push:
    branches: [ develop ]
    paths:
      - 'docker-compose.yml'
      - 'docker-compose.override.yml'
      - 'cloudflared-config/**'
  workflow_dispatch:
    # Cho ph√©p k√≠ch ho·∫°t th·ªß c√¥ng

jobs:
  check-and-deploy:
    runs-on: ubuntu-latest
    # S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng ·ªü c·∫•p workflow thay v√¨ secrets
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup environment variables
        # Ch·ªâ ƒë·ªçc bi·∫øn t·ª´ GitHub variables
        run: |
          # L∆∞u domain v√†o bi·∫øn m√¥i tr∆∞·ªùng
          echo "SSH_DOMAIN=${{ vars.SSH_DOMAIN || 'ssh.yourdomain.com' }}" >> $GITHUB_ENV
          echo "N8N_DOMAIN=${{ vars.N8N_DOMAIN || 'n8n.yourdomain.com' }}" >> $GITHUB_ENV

      - name: Setup SSH config for Cloudflare Access
        run: |
          mkdir -p ~/.ssh
          echo "Host ${{ env.SSH_DOMAIN }}" > ~/.ssh/config
          echo "  ProxyCommand cloudflared access ssh --hostname %h" >> ~/.ssh/config
          echo "  User ${{ secrets.SSH_USER }}" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          
          # Thi·∫øt l·∫≠p SSH key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Install cloudflared
        run: |
          # T·∫£i v√† c√†i ƒë·∫∑t cloudflared
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb
          
          # Thi·∫øt l·∫≠p cloudflared v·ªõi token
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}" > ~/.cloudflared/token
          
      - name: Deploy to server if needed
        if: steps.check-update.outputs.deploy == 'true'
        run: |
          echo "Deploying because: ${{ steps.check-update.outputs.deploy_reason }}"
          
          # Sao ch√©p c√°c file docker-compose v√† c·∫•u h√¨nh Cloudflare
          scp -r docker-compose.yml docker-compose.override.yml cloudflared-config ${{ env.SSH_DOMAIN }}:${{ secrets.DEPLOY_PATH }}
          
          # Th·ª±c hi·ªán pull v√† restart
          ssh ${{ env.SSH_DOMAIN }} '
            cd ${{ secrets.DEPLOY_PATH }} && 
            docker-compose pull && 
            docker-compose up -d
          '
          
          # G·ª≠i th√¥ng b√°o Telegram (n·∫øu c·∫ßn)
          if [[ ! -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" && ! -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
            curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
              -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
              -d text="üöÄ Deployed n8n: ${{ steps.check-update.outputs.deploy_reason }}" \
              -d parse_mode=Markdown
          fi