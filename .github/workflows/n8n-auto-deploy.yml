name: Auto Deploy n8n

on:
  push:
    branches: [ master, develop, staging ]
  workflow_dispatch:
    # Cho ph√©p k√≠ch ho·∫°t th·ªß c√¥ng

# Chia group concurrency theo t·ª´ng branch (m·ªói branch s·∫Ω c√≥ h√†ng ƒë·ª£i ri√™ng)
# N·∫øu c√≥ workflow m·ªõi tr√™n c√πng m·ªôt branch, workflow c≈© s·∫Ω b·ªã cancel, ch·ªâ gi·ªØ l·∫°i workflow m·ªõi nh·∫•t
concurrency:
  group: n8n-deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest # S·ª≠ d·ª•ng GitHub-hosted runner
    environment: ${{ github.ref_name == 'master' && 'production' ||  github.ref_name == 'develop' && 'development' ||  github.ref_name == 'staging' && 'staging' }}
    # ƒê·∫∑t th·ªùi gian timeout cho to√†n b·ªô job n√†y l√† 30 ph√∫t
    timeout-minutes: 30 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Required Secrets and Variables
        run: |
          echo "üîç Validating required secrets..."
          MISSING=()
          [ -z "${{ secrets.REDIS_PASSWORD }}" ] && MISSING+=("REDIS_PASSWORD")
          [ -z "${{ secrets.POSTGRES_PASSWORD }}" ] && MISSING+=("POSTGRES_PASSWORD") 
          [ -z "${{ secrets.N8N_ENCRYPTION_KEY }}" ] && MISSING+=("N8N_ENCRYPTION_KEY")
          [ -z "${{ secrets.CLOUDFLARED_TOKEN }}" ] && MISSING+=("CLOUDFLARED_TOKEN")
          
          if [ ${#MISSING[@]} -gt 0 ]; then
            echo "‚ùå Missing secrets: ${MISSING[*]}"
            exit 1
          fi
          echo "‚úÖ All required secrets configured"
          echo "TRUENAS_DEPLOY_DIR=${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${GITHUB_REF_NAME}" >> $GITHUB_ENV
        shell: bash

      - name: Setup Cloudflared and SSH Config
        run: |
          # Install cloudflared
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          echo "Cloudflared version: $(cloudflared --version)"
          
          # T·∫°o th∆∞ m·ª•c $HOME/.ssh n·∫øu ch∆∞a t·ªìn t·∫°i
          mkdir -p "$HOME/.ssh"
          
          # T·∫°o t·ªáp c·∫•u h√¨nh SSH s·ª≠ d·ª•ng $HOME
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR" > "$HOME/.ssh/config" # S·ª≠ d·ª•ng $HOME
          
          chmod 600 "$HOME/.ssh/config"
          echo "‚úÖ SSH config for Cloudflared created at $HOME/.ssh/config"
        shell: bash

      - name: Add TrueNAS SSH Private Key to SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: Prepare and sync to TrueNAS
        run: |
          echo "üìÅ Preparing deploy directory..."
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel "mkdir -p ${{ env.TRUENAS_DEPLOY_DIR }}"
          
          echo "üîÑ Syncing project files..."
          rsync -avz -e "ssh -F $HOME/.ssh/config" \
            --exclude '.git/' --exclude '.github/' --exclude 'README-Self-Hosted-Runner.md' \
            --delete $GITHUB_WORKSPACE/ truenas-cf-tunnel:"${{ env.TRUENAS_DEPLOY_DIR }}/"
          echo "‚úÖ Files synced to TrueNAS"
        shell: bash

      - name: Create .env file on TrueNAS
        run: |
          # Create .env file via SSH with proper variable substitution
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << 'REMOTE_EOF'
          set -e
          cd "${{ env.TRUENAS_DEPLOY_DIR }}"
          
          echo "Creating .env file..."
          cat > .env << 'EOF'
          # Project name
          COMPOSE_PROJECT_NAME=${{ vars.COMPOSE_PROJECT_NAME || 'n8n' }}
          
          # PostgreSQL
          POSTGRES_USER=${{ secrets.POSTGRES_USER || 'n8n' }}
          POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}'
          POSTGRES_DB=${{ secrets.POSTGRES_DB || 'n8n_database' }}
          POSTGRES_EXTERNAL_PORT=${{ vars.POSTGRES_EXTERNAL_PORT || '5432' }}
          
          # n8n
          N8N_BASIC_AUTH_USER=${{ secrets.N8N_BASIC_AUTH_USER || 'admin' }}
          N8N_BASIC_AUTH_PASSWORD='${{ secrets.N8N_BASIC_AUTH_PASSWORD }}'
          N8N_ENCRYPTION_KEY='${{ secrets.N8N_ENCRYPTION_KEY }}'
          DB_POSTGRESDB_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}'
          WEBHOOK_URL=${{ vars.WEBHOOK_URL || 'https://your-domain.com' }}
          N8N_EXTERNAL_PORT=${{ vars.N8N_EXTERNAL_PORT || '5678' }}
          N8N_RETENTION=${{ vars.N8N_RETENTION || '7' }}
          
          # Excel API
          EXCEL_API_HTTP_PORT=${{ vars.EXCEL_API_HTTP_PORT || '8080' }}
          EXCEL_API_HTTPS_PORT=${{ vars.EXCEL_API_HTTPS_PORT || '8443' }}
           
          # System Settings
          GENERIC_TIMEZONE=${{ secrets.GENERIC_TIMEZONE || 'Asia/Ho_Chi_Minh' }}
          TZ=${{ secrets.TZ || 'Asia/Ho_Chi_Minh' }}
          N8N_DEFAULT_BINARY_DATA_MODE=${{ secrets.N8N_DEFAULT_BINARY_DATA_MODE || 'filesystem' }}
          EXECUTIONS_DATA_PRUNE=${{ secrets.EXECUTIONS_DATA_PRUNE || 'true' }}
          EXECUTIONS_DATA_MAX_AGE=${{ secrets.EXECUTIONS_DATA_MAX_AGE || '720' }}
          EXECUTIONS_DATA_PRUNE_MAX_COUNT=${{ secrets.EXECUTIONS_DATA_PRUNE_MAX_COUNT || '50000' }}
          
          # Redis Configuration
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_DB=${{ secrets.REDIS_DB || '0' }}
          
          # n8n Main/Worker Configuration
          N8N_BASIC_AUTH_ACTIVE=${{ secrets.N8N_BASIC_AUTH_ACTIVE || 'true' }}
          N8N_CONCURRENCY=${{ secrets.N8N_CONCURRENCY || '1' }}
          
          # Excel API Configuration
          ASPNETCORE_ENVIRONMENT=${{ secrets.ASPNETCORE_ENVIRONMENT || 'Production' }}
          ASPNETCORE_URLS=${{ secrets.ASPNETCORE_URLS || 'http://+:80' }}
          
          # Backup settings
          N8N_BACKUP_DIR_HOST=${{ secrets.N8N_BACKUP_DIR_HOST || '/mnt/data/n8n-backup' }}
          TRUENAS_DEPLOY_DIR=${{ env.TRUENAS_DEPLOY_DIR }}
          
          # Redis External Port
          REDIS_EXTERNAL_PORT=${{ vars.REDIS_EXTERNAL_PORT || '6379' }}
          
          # Cloudflare Tunnel
          CLOUDFLARED_TOKEN=${{ secrets.CLOUDFLARED_TOKEN }}
          EOF

          echo "Setting up n8n config..."
          mkdir -p ./n8n_data
          if [ -f "./n8n_data/config" ]; then
            cp "./n8n_data/config" "./n8n_data/config.bak.$(date +%Y%m%d_%H%M%S)"
          fi
          
          CLEAN_KEY=$(grep "N8N_ENCRYPTION_KEY=" .env | cut -d '=' -f2- | sed "s/^'//;s/'$//")
          if [ ! -z "$CLEAN_KEY" ] && [ "$CLEAN_KEY" != "null" ]; then
            printf '{"encryptionKey": "%s"}\n' "$CLEAN_KEY" > ./n8n_data/config
          fi
          
          echo "‚úÖ Environment configured successfully"
          REMOTE_EOF
        shell: bash

      - name: docker compose operations on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << 'EOF'
            #!/bin/bash
            set -e
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            echo "üê≥ Deploying with Docker Compose..."
            
            # Check Docker permissions
            if ! docker ps >/dev/null 2>&1; then
              USE_SUDO="sudo"
              echo "‚ö†Ô∏è Using sudo for Docker commands"
            else
              USE_SUDO=""
            fi
            
            # Deploy services
            echo "üîÑ Pulling latest images..."
            $USE_SUDO docker compose pull
            
            echo "üî® Building images..."
            $USE_SUDO docker compose build
            
            echo "‚èπÔ∏è Stopping existing containers..."
            $USE_SUDO docker compose down --remove-orphans || true
            
            echo "üöÄ Starting services..."
            $USE_SUDO docker compose up -d
            
            echo "‚è≥ Waiting for services to start..."
            sleep 30
            
            echo "üìä Container status:"
            $USE_SUDO docker compose ps
            echo "‚úÖ Deployment completed"
          EOF
        shell: bash

      - name: Verify deployment
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << 'EOF'
            #!/bin/bash
            cd ${{ env.TRUENAS_DEPLOY_DIR }}
            
            # Check Docker permissions
            if ! docker ps >/dev/null 2>&1; then
              USE_SUDO="sudo"
            else
              USE_SUDO=""
            fi
            
            echo "üîç Verifying deployment..."
            echo "‚è≥ Waiting for n8n services startup (60s)..."
            sleep 60
            
            echo "üìä Final container status:"
            $USE_SUDO docker compose ps
            
            # Check n8n services
            if $USE_SUDO docker compose ps n8n-main | grep -q "Up"; then
              echo "‚úÖ n8n Main is running"
            else
              echo "‚ùå n8n Main not running"
              $USE_SUDO docker compose logs --tail=10 n8n-main
              exit 1
            fi
            
            if $USE_SUDO docker compose ps n8n-worker | grep -q "Up"; then
              echo "‚úÖ n8n Worker is running"
              if $USE_SUDO docker compose logs n8n-worker | grep -q "Concurrency: 1"; then
                echo "‚úÖ n8n Worker configured with sequential processing"
              else
                echo "‚ö†Ô∏è n8n Worker may have configuration issues"
                $USE_SUDO docker compose logs --tail=10 n8n-worker
              fi
            else
              echo "‚ùå n8n Worker not running"
              $USE_SUDO docker compose logs --tail=10 n8n-worker
              exit 1
            fi
            
            if $USE_SUDO docker compose ps redis | grep -q "Up"; then
              echo "‚úÖ Redis is running"
            else
              echo "‚ùå Redis not running"
              $USE_SUDO docker compose logs --tail=10 redis
              exit 1
            fi
            
            if $USE_SUDO docker compose ps cloudflare-tunnel-n8n | grep -q "Up"; then
              echo "‚úÖ Cloudflare Tunnel is running"
            else
              echo "‚ö†Ô∏è Cloudflare Tunnel might not be configured or running"
              $USE_SUDO docker compose logs --tail=10 cloudflare-tunnel-n8n || true
            fi
            
            echo "‚úÖ Deployment verification completed"
          EOF
        shell: bash

      - name: Display deployment summary
        run: |
          echo "üåê Deployment Summary:"
          echo "  ‚Ä¢ Environment: ${{ github.ref_name }}"
          echo "  ‚Ä¢ n8n URL: ${{ vars.WEBHOOK_URL || 'http://<IP_TRUENAS>:5678' }}"
          echo "  ‚Ä¢ Redis: Main/Worker architecture enabled"
          echo "  ‚Ä¢ Worker Concurrency: Sequential processing (1)"
          echo "  ‚Ä¢ Cloudflare Tunnel: Configured for n8n access"
          echo "‚úÖ Deployment completed successfully!"
        shell: bash
        
      - name: Send Discord success/failure notification
        if: success() || failure()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ${{ job.status == 'success' && '‚úÖ **Tri·ªÉn khai n8n + Discord Bot l√™n TrueNAS TH√ÄNH C√îNG!**' || '‚ùå **Tri·ªÉn khai n8n + Discord Bot l√™n TrueNAS TH·∫§T B·∫†I!**' }}
            
            üìä **Th√¥ng tin tri·ªÉn khai:**
            ‚Ä¢ **Nh√°nh:** `${{ github.ref_name }}`
            ‚Ä¢ **n8n:** ${{ vars.WEBHOOK_URL || 'http://<IP_TRUENAS>:5678' }}
            ‚Ä¢ **Discord Bot:** ${{ job.status == 'success' && 'ƒê√£ kh·ªüi ƒë·ªông v√† k·∫øt n·ªëi' || 'L·ªói kh·ªüi ƒë·ªông' }}
            ‚Ä¢ **Webhook:** `${{ vars.DISCORD_N8N_WEBHOOK_URL || 'http://n8n:5678/webhook/discord-event' }}`
            
            [üìã Xem Chi Ti·∫øt Deploy](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Send Discord timeout notification
        if: cancelled()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ‚è±Ô∏è **Tri·ªÉn khai n8n + Discord Bot ƒê√É B·ªä H·ª¶Y do timeout (> 30 ph√∫t)!**
            
            üìä **Th√¥ng tin:**
            ‚Ä¢ **Nh√°nh:** `${{ github.ref_name }}`
            ‚Ä¢ **Th·ªùi gian:** V∆∞·ª£t qu√° 30 ph√∫t
            
            [üìã Xem Chi Ti·∫øt Deploy](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})