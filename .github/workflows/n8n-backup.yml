name: Daily n8n Backup (Production Only)

on:
  workflow_dispatch:
    # Cho ph√©p k√≠ch ho·∫°t th·ªß c√¥ng
  schedule:
    - cron: '15 0 * * *' # 7h15 s√°ng gi·ªù Vi·ªát Nam (UTC+7)

jobs:
  backup:
    if: ${{ github.ref_name == 'master' }}
    runs-on: ubuntu-latest # Changed from self-hosted
    environment: production # Explicitly set environment for master branch
    # ƒê·∫∑t th·ªùi gian timeout cho to√†n b·ªô job n√†y l√† 30 ph√∫t
    timeout-minutes: 30 
    name: Daily n8n Backup (Production via TrueNAS SSH) # Updated name for clarity
    steps:
      - name: Set TrueNAS Deploy Directory Environment Variable
        run: echo "TRUENAS_DEPLOY_DIR=${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${{ github.ref_name }}" >> $GITHUB_ENV
        shell: bash

      - name: Setup Cloudflared and SSH Config
        run: |
          echo "Runner HOME directory is: $HOME"
          # C√†i ƒë·∫∑t cloudflared
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          echo "Cloudflared version: $(cloudflared --version)"

          # T·∫°o th∆∞ m·ª•c $HOME/.ssh n·∫øu ch∆∞a t·ªìn t·∫°i
          mkdir -p "$HOME/.ssh"
          
          # T·∫°o t·ªáp c·∫•u h√¨nh SSH s·ª≠ d·ª•ng $HOME
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR" > "$HOME/.ssh/config" # S·ª≠ d·ª•ng $HOME
          
          chmod 600 "$HOME/.ssh/config"
          echo "‚úÖ SSH config for Cloudflared created at $HOME/.ssh/config"
        shell: bash

      - name: Add TrueNAS SSH Private Key to SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: Check required files and environment on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            set -e # Exit immediately if a command exits with a non-zero status.
            echo "üîç Checking environment in ${{ env.TRUENAS_DEPLOY_DIR }} on TrueNAS..."
            cd "${{ env.TRUENAS_DEPLOY_DIR }}"
            
            # Check required files
            if [ ! -f .env ]; then
              echo "‚ùå Kh√¥ng t√¨m th·∫•y file .env trong ${{ env.TRUENAS_DEPLOY_DIR }} tr√™n TrueNAS"; exit 1;
            fi
            if [ ! -f backup-n8n.sh ]; then
              echo "‚ùå Kh√¥ng t√¨m th·∫•y script backup-n8n.sh trong ${{ env.TRUENAS_DEPLOY_DIR }} tr√™n TrueNAS"; exit 1;
            fi
            if [ ! -f docker-compose.yml ]; then
              echo "‚ùå Kh√¥ng t√¨m th·∫•y docker-compose.yml trong ${{ env.TRUENAS_DEPLOY_DIR }} tr√™n TrueNAS"; exit 1;
            fi
            
            # Load environment and check key variables
            set -a
            source .env
            set +a
            
            echo "‚úÖ Required files found."
            echo "üîç Environment variables check:"
            echo "   COMPOSE_PROJECT_NAME: \${COMPOSE_PROJECT_NAME:-NOT_SET}"
            echo "   POSTGRES_DB: \${POSTGRES_DB:-NOT_SET}"
            echo "   POSTGRES_USER: \${POSTGRES_USER:-NOT_SET}"
            echo "   N8N_BACKUP_DIR_HOST: \${N8N_BACKUP_DIR_HOST:-NOT_SET}"
            
            # Check Docker services status
            echo "üîç Docker services status:"
            if command -v docker-compose &>/dev/null; then
              docker-compose ps || docker compose ps
            else
              docker compose ps
            fi
            
            # Check backup directory
            if [ -n "\${N8N_BACKUP_DIR_HOST:-}" ] && [ ! -d "\${N8N_BACKUP_DIR_HOST}" ]; then
              echo "‚ö†Ô∏è  Backup directory \${N8N_BACKUP_DIR_HOST} kh√¥ng t·ªìn t·∫°i, s·∫Ω t·∫°o m·ªõi."
              mkdir -p "\${N8N_BACKUP_DIR_HOST}"
            fi
            
            echo "‚úÖ Environment check completed."
          EOF
        shell: bash

      - name: Execute backup on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            set -e # Exit immediately if a command exits with a non-zero status.
            echo "üîí ƒêang backup d·ªØ li·ªáu n8n cho m√¥i tr∆∞·ªùng production (branch: ${{ github.ref_name }}) tr√™n TrueNAS..."
            echo "   Th∆∞ m·ª•c tri·ªÉn khai: ${{ env.TRUENAS_DEPLOY_DIR }}"
            echo "   Th·ªùi gian b·∫Øt ƒë·∫ßu: \$(date '+%Y-%m-%d %H:%M:%S')"
            
            cd "${{ env.TRUENAS_DEPLOY_DIR }}"
            
            # Make backup script executable
            chmod +x ./backup-n8n.sh
            
            # Execute backup with detailed logging
            echo "üöÄ Executing backup script..."
            if bash ./backup-n8n.sh; then
              echo "‚úÖ Backup completed successfully!"
              
              # Show backup results
              source .env
              if [ -n "\${N8N_BACKUP_DIR_HOST:-}" ] && [ -d "\${N8N_BACKUP_DIR_HOST}" ]; then
                echo "üìÅ Recent backups:"
                ls -la "\${N8N_BACKUP_DIR_HOST}" | tail -5
                
                # Show latest backup contents
                LATEST_BACKUP=\$(ls -1t "\${N8N_BACKUP_DIR_HOST}" | head -1)
                if [ -n "\$LATEST_BACKUP" ] && [ -d "\${N8N_BACKUP_DIR_HOST}/\$LATEST_BACKUP" ]; then
                  echo "üì¶ Latest backup contents:"
                  ls -la "\${N8N_BACKUP_DIR_HOST}/\$LATEST_BACKUP/"
                fi
              fi
            else
              echo "‚ùå Backup failed!"
              exit 1
            fi
            
            echo "   Th·ªùi gian k·∫øt th√∫c: \$(date '+%Y-%m-%d %H:%M:%S')"
          EOF
        shell: bash

      - name: Set backup error timestamp
        if: failure()
        run: |
          echo "TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: Send Discord error notification for backup
        if: failure()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ‚ùå Backup n8n th·∫•t b·∫°i tr√™n branch **${{ github.ref_name }}** l√∫c **${{ env.TIMESTAMP }}**
            Nh√°nh: **${{ github.ref_name }}**
            [Xem Chi Ti·∫øt Job](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Send Discord timeout notification for backup
        if: cancelled()
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            ‚è±Ô∏è Backup n8n (Production) **ƒê√É B·ªä H·ª¶Y** do qu√° th·ªùi gian (timeout > 30 ph√∫t)!
            Nh√°nh: **${{ github.ref_name }}**
            [Xem Chi Ti·∫øt Job](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

