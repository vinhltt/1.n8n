name: Daily n8n Backup (Production Only)

on:
  workflow_dispatch:
    # Cho ph√©p k√≠ch ho·∫°t th·ªß c√¥ng
  schedule:
    - cron: '15 0 * * *' # 7h15 s√°ng gi·ªù Vi·ªát Nam (UTC+7)

jobs:
  backup:
    if: ${{ github.ref_name == 'master' }}
    runs-on: ubuntu-latest # Changed from self-hosted
    environment: production # Explicitly set environment for master branch
    # ƒê·∫∑t th·ªùi gian timeout cho to√†n b·ªô job n√†y l√† 30 ph√∫t
    timeout-minutes: 30 
    name: Daily n8n Backup (Production via TrueNAS SSH) # Updated name for clarity
    steps:
      - name: Set TrueNAS Deploy Directory Environment Variable
        run: echo "TRUENAS_DEPLOY_DIR=${{ vars.DEPLOY_PATH_ON_TRUENAS }}/deploy_${{ github.ref_name }}" >> $GITHUB_ENV
        shell: bash

      - name: Setup Cloudflared and SSH Config
        run: |
          echo "Runner HOME directory is: $HOME"
          # C√†i ƒë·∫∑t cloudflared
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          echo "Cloudflared version: $(cloudflared --version)"

          # T·∫°o th∆∞ m·ª•c $HOME/.ssh n·∫øu ch∆∞a t·ªìn t·∫°i
          mkdir -p "$HOME/.ssh"
          
          # T·∫°o t·ªáp c·∫•u h√¨nh SSH s·ª≠ d·ª•ng $HOME
          echo "Host truenas-cf-tunnel
            HostName ${{ secrets.TRUENAS_SSH_HOSTNAME_THROUGH_CLOUDFLARED }}
            ProxyCommand cloudflared access ssh --hostname %h
            User ${{ secrets.TRUENAS_USER }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR" > "$HOME/.ssh/config" # S·ª≠ d·ª•ng $HOME
          
          chmod 600 "$HOME/.ssh/config"
          echo "‚úÖ SSH config for Cloudflared created at $HOME/.ssh/config"
        shell: bash

      - name: Add TrueNAS SSH Private Key to SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TRUENAS_SSH_PRIVATE_KEY }}

      - name: Check required files on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            set -e # Exit immediately if a command exits with a non-zero status.
            echo "Checking files in ${{ env.TRUENAS_DEPLOY_DIR }} on TrueNAS..."
            cd "${{ env.TRUENAS_DEPLOY_DIR }}"
            if [ ! -f .env ]; then
              echo "‚ùå Kh√¥ng t√¨m th·∫•y file .env trong ${{ env.TRUENAS_DEPLOY_DIR }} tr√™n TrueNAS"; exit 1;
            fi
            if [ ! -f backup-n8n.sh ]; then
              echo "‚ùå Kh√¥ng t√¨m th·∫•y script backup-n8n.sh trong ${{ env.TRUENAS_DEPLOY_DIR }} tr√™n TrueNAS"; exit 1;
            fi
            echo "‚úÖ Required files .env and backup-n8n.sh found on TrueNAS."
          EOF
        shell: bash

      - name: Execute backup on TrueNAS
        run: |
          ssh -F "$HOME/.ssh/config" truenas-cf-tunnel << EOF
            set -e # Exit immediately if a command exits with a non-zero status.
            echo "üîí ƒêang backup d·ªØ li·ªáu n8n cho m√¥i tr∆∞·ªùng production (branch: ${{ github.ref_name }}) tr√™n TrueNAS..."
            echo "   Th∆∞ m·ª•c tri·ªÉn khai: ${{ env.TRUENAS_DEPLOY_DIR }}"
            cd "${{ env.TRUENAS_DEPLOY_DIR }}"
            bash ./backup-n8n.sh
            echo "‚úÖ ƒê√£ backup d·ªØ li·ªáu n8n th√†nh c√¥ng tr√™n TrueNAS."
          EOF
        shell: bash

      - name: Send Discord error notification for backup
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [[ -n "${DISCORD_WEBHOOK_URL}" ]]; then
            TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
            MESSAGE="‚ùå Backup n8n th·∫•t b·∫°i tr√™n branch $GITHUB_REF_NAME l√∫c $TIMESTAMP"
            JSON_PAYLOAD=$(printf '{"content":"%s"}' "$MESSAGE")
            curl -s -X POST \
              -H "Content-Type: application/json" \
              -d "$JSON_PAYLOAD" \
              "${DISCORD_WEBHOOK_URL}"
            echo "‚ÑπÔ∏è Th√¥ng b√°o Discord (l·ªói backup) ƒë√£ ƒë∆∞·ª£c g·ª≠i."
          else
            echo "‚ö†Ô∏è Bi·∫øn Discord (DISCORD_WEBHOOK_URL) ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t. B·ªè qua th√¥ng b√°o l·ªói backup."
          fi
        shell: bash

      - name: Send Discord timeout notification for backup
        if: cancelled()
        run: |
          if [[ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]]; then
            ACTION_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            STATUS_EMOJI="‚è±Ô∏è"
            STATUS_TEXT="Backup n8n (Production) ƒê√É B·ªä H·ª¶Y do qu√° th·ªùi gian (timeout > 30 ph√∫t)!"
            
            JSON_PAYLOAD=$(printf '{"content":"%s **%s**\nNh√°nh: %s\n[Xem Chi Ti·∫øt Job](%s)"}' \
              "$STATUS_EMOJI" \
              "$STATUS_TEXT" \
              "${{ github.ref_name }}" \
              "$ACTION_URL")
            curl -s -X POST \
              -H "Content-Type: application/json" \
              -d "$JSON_PAYLOAD" \
              "${{ secrets.DISCORD_WEBHOOK_URL }}"
            echo "‚ÑπÔ∏è Th√¥ng b√°o Discord (timeout backup) ƒë√£ ƒë∆∞·ª£c g·ª≠i."
          else
            echo "‚ö†Ô∏è Bi·∫øn Discord (DISCORD_WEBHOOK_URL) ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t. B·ªè qua th√¥ng b√°o timeout backup."
          fi
        shell: bash
