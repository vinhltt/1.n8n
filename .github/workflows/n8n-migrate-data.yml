name: Migrate n8n Data

on:
  workflow_dispatch:
    inputs:
      new_prefix:
        description: 'New prefix for n8n (e.g., prod_n8n)'
        required: true
        type: string

jobs:
  migrate:
    runs-on: self-hosted
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file for migration
        run: |
          echo "Creating .env file for migration..."
          cat > .env << EOF
          COMPOSE_PROJECT_NAME=${{ github.event.inputs.new_prefix }}
          
          # PostgreSQL
          POSTGRES_USER=${{ secrets.POSTGRES_USER || 'n8n' }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB || 'n8n_database' }}
          
          # n8n
          N8N_BASIC_AUTH_USER=${{ secrets.N8N_BASIC_AUTH_USER || 'admin' }}
          N8N_BASIC_AUTH_PASSWORD=${{ secrets.N8N_BASIC_AUTH_PASSWORD }}
          N8N_ENCRYPTION_KEY=${{ secrets.N8N_ENCRYPTION_KEY }}
          DB_POSTGRESDB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          WEBHOOK_URL=${{ vars.WEBHOOK_URL }}
          
          # Timezone & other settings
          GENERIC_TIMEZONE=${{ secrets.GENERIC_TIMEZONE || 'Asia/Ho_Chi_Minh' }}
          TZ=${{ secrets.TZ || 'Asia/Ho_Chi_Minh' }}
          N8N_DEFAULT_BINARY_DATA_MODE=${{ secrets.N8N_DEFAULT_BINARY_DATA_MODE || 'filesystem' }}
          EXECUTIONS_DATA_PRUNE=${{ secrets.EXECUTIONS_DATA_PRUNE || 'true' }}
          EXECUTIONS_DATA_MAX_AGE=${{ secrets.EXECUTIONS_DATA_MAX_AGE || '720' }}
          EXECUTIONS_DATA_PRUNE_MAX_COUNT=${{ secrets.EXECUTIONS_DATA_PRUNE_MAX_COUNT || '50000' }}
          EOF

      - name: Backup current data
        run: |
          echo "üì¶ Creating backup of current data..."
          
          # T·∫°o th∆∞ m·ª•c backup n·∫øu ch∆∞a t·ªìn t·∫°i
          mkdir -p ./backup
          
          # Backup volumes hi·ªán t·∫°i
          docker run --rm \
            -v n8n_data:/source:ro \
            -v $(pwd)/backup:/backup \
            alpine tar czf /backup/n8n_data_backup_$(date +%Y%m%d_%H%M%S).tar.gz -C /source .

          # Backup PostgreSQL data
          docker run --rm \
            -v n8n_postgres_data:/source:ro \
            -v $(pwd)/backup:/backup \
            alpine tar czf /backup/postgres_data_backup_$(date +%Y%m%d_%H%M%S).tar.gz -C /source .

          echo "‚úÖ Backup completed successfully"

      - name: Stop current containers
        run: |
          echo "üõë Stopping current containers..."
          docker-compose down
          echo "‚úÖ Current containers stopped"

      - name: Migrate data
        env:
          COMPOSE_PROJECT_NAME: ${{ github.event.inputs.new_prefix }}
        run: |
          echo "üîÑ Starting migration process..."
          docker volume create ${COMPOSE_PROJECT_NAME}_n8n_data
          docker volume create ${COMPOSE_PROJECT_NAME}_postgres_data

          echo "Restoring n8n data..."
          BACKUP_FILE=$(ls -t $(pwd)/backup/n8n_data_backup_*.tar.gz 2>/dev/null | head -1)
          if [ -z "$BACKUP_FILE" ]; then
            echo "‚ùå Kh√¥ng t√¨m th·∫•y file backup n8n_data!"
            exit 1
          fi
          docker run --rm \
            -v $(pwd)/backup:/backup \
            -v ${COMPOSE_PROJECT_NAME}_n8n_data:/target \
            alpine sh -c "cd /target && tar xzf /backup/$(basename $BACKUP_FILE)"

          echo "Restoring PostgreSQL data..."
          BACKUP_FILE=$(ls -t $(pwd)/backup/postgres_data_backup_*.tar.gz 2>/dev/null | head -1)
          if [ -z "$BACKUP_FILE" ]; then
            echo "‚ùå Kh√¥ng t√¨m th·∫•y file backup postgres_data!"
            exit 1
          fi
          docker run --rm \
            -v $(pwd)/backup:/backup \
            -v ${COMPOSE_PROJECT_NAME}_postgres_data:/target \
            alpine sh -c "cd /target && tar xzf /backup/$(basename $BACKUP_FILE)"

          echo "‚úÖ Data migration completed"

      - name: Start new containers
        env:
          COMPOSE_PROJECT_NAME: ${{ github.event.inputs.new_prefix }}
        run: |
          echo "üöÄ Starting new containers with new prefix..."
          docker-compose -p ${COMPOSE_PROJECT_NAME} up  -d
          echo "‚úÖ New containers started"

      - name: Verify migration
        env:
          COMPOSE_PROJECT_NAME: ${{ github.event.inputs.new_prefix }}
        run: |
          echo "üîç Verifying migration..."
          
          # Ki·ªÉm tra containers m·ªõi
          if docker ps | grep -q "${COMPOSE_PROJECT_NAME}"; then
            echo "‚úÖ New containers are running"
          else
            echo "‚ùå New containers are not running"
            exit 1
          fi
          
          # Ki·ªÉm tra volumes m·ªõi
          if docker volume ls | grep -q "${COMPOSE_PROJECT_NAME}_n8n_data"; then
            echo "‚úÖ New volumes are created"
          else
            echo "‚ùå New volumes are not created"
            exit 1
          fi

      - name: Send notification
        if: always()
        run: |
          if [[ ! -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" && ! -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
            ACTION_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            
            if [ "${{ job.status }}" == "success" ]; then
              STATUS_EMOJI="‚úÖ"
              STATUS_TEXT="Data migration completed successfully!"
            else
              STATUS_EMOJI="‚ùå"
              STATUS_TEXT="Data migration failed!"
            fi
            
            curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
                "text": "'"$STATUS_EMOJI"' *'"$STATUS_TEXT"'*\nNew prefix: '"${{ github.event.inputs.new_prefix }}"'\n[View Migration Details]('"$ACTION_URL"')",
                "parse_mode": "Markdown"
              }'
          fi 