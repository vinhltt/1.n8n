#!/usr/bin/env bash
# =====================================================================
#  n8n + PostgreSQL backup script
# =====================================================================

set -euo pipefail
set -x
IFS=$'\n\t'

# 1) ƒê·∫£m b·∫£o ƒëang d√πng bash
if [ -z "${BASH_VERSION:-}" ]; then
  echo "Error: Script ph·∫£i ch·∫°y v·ªõi bash, kh√¥ng ph·∫£i sh." >&2
  exit 1
fi

# 2) X√°c ƒë·ªãnh th∆∞ m·ª•c ch·ª©a script & load .env (l·ªçc CRLF n·∫øu c√≥)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_FILE="$SCRIPT_DIR/.env"
[[ -f "$ENV_FILE" ]] || { echo "L·ªói: Kh√¥ng t√¨m th·∫•y .env t·∫°i $ENV_FILE" >&2; exit 1; }
set -a
source <(sed 's/\r$//' "$ENV_FILE")
set +a

# 3) Bi·∫øn c·∫•u h√¨nh, b√°o l·ªói n·∫øu thi·∫øu
# --- L·∫•y t√™n container PostgreSQL th·ª±c t·∫ø ---
if [ -z "${POSTGRES_CONTAINER:-}" ]; then
  # ∆Øu ti√™n s·ª≠ d·ª•ng COMPOSE_PROJECT_NAME ƒë·ªÉ construct container name
  if [ -n "${COMPOSE_PROJECT_NAME:-}" ]; then
    POSTGRES_CONTAINER="${COMPOSE_PROJECT_NAME}-postgresdb-1"
    echo "üîç Using COMPOSE_PROJECT_NAME to construct container: $POSTGRES_CONTAINER"
  else
    # Fallback: Th·ª≠ l·∫•y t·ª´ docker-compose n·∫øu kh√¥ng c√≥ COMPOSE_PROJECT_NAME
    echo "üîç COMPOSE_PROJECT_NAME not set, trying auto-detection..."
    if command -v docker-compose &>/dev/null; then
      POSTGRES_SERVICE=$(docker-compose ps --services 2>/dev/null | grep -E '^postgres(db)?$' | head -n1)
      if [ -n "$POSTGRES_SERVICE" ]; then
        POSTGRES_CONTAINER_ID=$(docker-compose ps -q "$POSTGRES_SERVICE" 2>/dev/null)
      fi
    else
      POSTGRES_SERVICE=$(docker compose ps --services 2>/dev/null | grep -E '^postgres(db)?$' | head -n1)
      if [ -n "$POSTGRES_SERVICE" ]; then
        POSTGRES_CONTAINER_ID=$(docker compose ps -q "$POSTGRES_SERVICE" 2>/dev/null)
      fi
    fi
    
    if [ -n "$POSTGRES_CONTAINER_ID" ]; then
      POSTGRES_CONTAINER=$(docker ps --filter id="$POSTGRES_CONTAINER_ID" --format '{{.Names}}')
    fi
    
    if [ -z "$POSTGRES_CONTAINER" ]; then
      echo "‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh container PostgreSQL."
      echo "   H√£y ƒë·∫∑t bi·∫øn POSTGRES_CONTAINER ho·∫∑c COMPOSE_PROJECT_NAME"
      echo "   C√°c container ƒëang ch·∫°y:"
      docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
      exit 1
    fi
  fi
fi

DB_NAME=${POSTGRES_DB:-n8n_database}
if [ -z "${N8N_VOLUME_NAME:-}" ]; then
  if [ -n "${COMPOSE_PROJECT_NAME:-}" ]; then
    N8N_VOLUME_NAME="${COMPOSE_PROJECT_NAME}_n8n_data"
    echo "üîç Using COMPOSE_PROJECT_NAME to construct volume: $N8N_VOLUME_NAME"
  else
    # Fallback: L·∫•y prefix t·ª´ t√™n container PostgreSQL
    PREFIX=$(echo "$POSTGRES_CONTAINER" | sed -E 's/-postgres(db)?-[0-9]+$//')
    N8N_VOLUME_NAME="${PREFIX}_n8n_data"
    echo "üîç Extracted prefix '$PREFIX' from container name"
  fi
fi
RETENTION_DAYS=${N8N_RETENTION_DAYS:-7}

: "${POSTGRES_USER:?L·ªói: POSTGRES_USER ch∆∞a ƒë·∫∑t}"
: "${POSTGRES_PASSWORD:?L·ªói: POSTGRES_PASSWORD ch∆∞a ƒë·∫∑t}"
: "${N8N_BACKUP_DIR_HOST:?L·ªói: N8N_BACKUP_DIR_HOST ch∆∞a ƒë·∫∑t}"

DB_USER="$POSTGRES_USER"
DB_PASSWORD="$POSTGRES_PASSWORD"
BACKUP_DIR="$N8N_BACKUP_DIR_HOST" # Thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n backup

# 4) Sanity checks Docker v·ªõi debugging
echo "üîç Ki·ªÉm tra container v√† volume..."
echo "   Container c·∫ßn backup: $POSTGRES_CONTAINER"
echo "   Volume c·∫ßn backup: $N8N_VOLUME_NAME"

# List containers for debugging
echo "   C√°c container ƒëang ch·∫°y:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" | head -10

if ! docker inspect "$POSTGRES_CONTAINER" >/dev/null 2>&1; then
  echo "‚ùå Container $POSTGRES_CONTAINER kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ch·∫°y."
  echo "   C√°c container hi·ªán c√≥:"
  docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
  exit 1
fi

# List volumes for debugging  
echo "   C√°c volume hi·ªán c√≥:"
docker volume ls | head -10

if ! docker volume inspect "$N8N_VOLUME_NAME" >/dev/null 2>&1; then
  echo "‚ùå Volume $N8N_VOLUME_NAME kh√¥ng t·ªìn t·∫°i."
  echo "   C√°c volume hi·ªán c√≥:"
  docker volume ls
  exit 1
fi

echo "‚úÖ Container v√† volume ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n."

# 5) T·∫°o RUN_DIR & file log trong ƒë√≥
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
RUN_DIR="$BACKUP_DIR/$TIMESTAMP"
mkdir -p "$RUN_DIR"

LOG_FILE="$RUN_DIR/backup.log"

# Redirect stdout & stderr c·ªßa to√†n b·ªô script v√†o c·∫£ console v√† file log
exec > >(tee -a "$LOG_FILE") 2>&1

echo "=================================================================="
echo "B·∫ÆT ƒê·∫¶U backup l√∫c:  $(date '+%F %T')"
echo "RUN_DIR:            $RUN_DIR"
echo "Container DB:       $POSTGRES_CONTAINER (DB: $DB_NAME)"
echo "Volume:             $N8N_VOLUME_NAME"
echo "Gi·ªØ l·∫°i:            $RETENTION_DAYS ng√†y"
echo "------------------------------------------------------------------"

FAILED=0

# 6.1) Dump PostgreSQL
DB_FILE="n8n_db_backup.sql.gz"
echo "[*] Dumping PostgreSQL ‚Ä¶"
if docker exec -i \
     -e PGPASSWORD="$DB_PASSWORD" \
     "$POSTGRES_CONTAINER" \
     pg_dump -U "$DB_USER" -d "$DB_NAME" -Fc 2>/dev/null \
     | gzip > "$RUN_DIR/$DB_FILE"; then
  echo "    ‚Üí OK: $DB_FILE"
else
  echo "    ‚Üí L·ªñI: backup database th·∫•t b·∫°i."
  FAILED=1
fi

# 6.2) Archive Docker volume
VOL_FILE="n8n_data_backup.tar.gz"
echo "[*] Archiving Docker volume ‚Ä¶"
if docker run --rm \
     -v "${N8N_VOLUME_NAME}:/volume_data:ro" \
     -v "${RUN_DIR}:/backup_target" \
     alpine sh -c "tar czf \"/backup_target/$VOL_FILE\" -C /volume_data ."; then
  echo "    ‚Üí OK: $VOL_FILE"
else
  echo "    ‚Üí L·ªñI: backup volume th·∫•t b·∫°i."
  FAILED=1
fi

# 6.3) Cleanup c√°c RUN_DIR c≈©
echo "[*] Xo√° th∆∞ m·ª•c backup c≈© (> $RETENTION_DAYS ng√†y) ‚Ä¶"
find "$BACKUP_DIR" -maxdepth 1 -mindepth 1 -type d \
     -name '[0-9]*_[0-9]*' -mtime +"$RETENTION_DAYS" \
     -print -exec rm -rf {} +

echo "------------------------------------------------------------------"
if [[ "$FAILED" -eq 0 ]]; then
  echo "‚úÖ  Backup ho√†n t·∫•t th√†nh c√¥ng."
else
  echo "‚ùå  Backup ho√†n t·∫•t nh∆∞ng C√ì L·ªñI (xem log)."
fi
echo "K·∫æT TH√öC l√∫c:  $(date '+%F %T')"
echo "=================================================================="

exit $FAILED
