const { Client, GatewayIntentBits, Events } = require('discord.js');
const axios = require('axios');
require('dotenv').config();

// C·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const config = {
  token: process.env.DISCORD_TOKEN,
  webhookUrl: process.env.N8N_WEBHOOK_URL,
  prefix: process.env.BOT_PREFIX || '!',
  enableMessageLogging: process.env.ENABLE_MESSAGE_LOGGING === 'true',
  enableMemberJoinLogging: process.env.ENABLE_MEMBER_JOIN_LOGGING === 'true',
  guildId: process.env.GUILD_ID || null,
  logLevel: process.env.LOG_LEVEL || 'info'
};

// T·∫°o Discord client v·ªõi c√°c intents c·∫ßn thi·∫øt
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildPresences
  ],
});

// H√†m logging v·ªõi level
function log(level, message, data = null) {
  const levels = { error: 0, warn: 1, info: 2, debug: 3 };
  const currentLevel = levels[config.logLevel] || 2;
  
  if (levels[level] <= currentLevel) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] [${level.toUpperCase()}] ${message}`);
    if (data && config.logLevel === 'debug') {
      console.log(JSON.stringify(data, null, 2));
    }
  }
}

// H√†m g·ª≠i webhook ƒë·∫øn n8n
async function sendWebhook(eventData) {
  if (!config.webhookUrl) {
    log('warn', 'N8N_WEBHOOK_URL kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh');
    return;
  }

  try {
    const response = await axios.post(config.webhookUrl, eventData, {
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Discord-N8N-Bot/1.0'
      },
      timeout: 10000 // 10 gi√¢y timeout
    });
    
    log('info', `Webhook g·ª≠i th√†nh c√¥ng: ${eventData.type}`, { 
      status: response.status,
      eventType: eventData.type 
    });
  } catch (error) {
    log('error', `L·ªói g·ª≠i webhook: ${error.message}`, {
      eventType: eventData.type,
      error: error.response?.data || error.message
    });
  }
}

// Event: Bot s·∫µn s√†ng
client.once(Events.ClientReady, (readyClient) => {
  log('info', `ü§ñ Bot ƒë√£ online: ${readyClient.user.tag}`);
  log('info', `üìä ƒêang ph·ª•c v·ª• ${readyClient.guilds.cache.size} server(s)`);
  
  // Thi·∫øt l·∫≠p activity status
  client.user.setActivity('n8n workflows', { type: 'WATCHING' });
});

// Event: Tin nh·∫Øn m·ªõi
client.on(Events.MessageCreate, async (message) => {
  // B·ªè qua tin nh·∫Øn t·ª´ bot
  if (message.author.bot) return;
  
  // Ki·ªÉm tra guild ID n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
  if (config.guildId && message.guild?.id !== config.guildId) return;
  
  // Ch·ªâ log tin nh·∫Øn n·∫øu ƒë∆∞·ª£c b·∫≠t
  if (!config.enableMessageLogging) return;

  const eventData = {
    type: 'message_create',
    timestamp: new Date().toISOString(),
    message: {
      id: message.id,
      content: message.content,
      author: {
        id: message.author.id,
        username: message.author.username,
        displayName: message.author.displayName,
        bot: message.author.bot
      },
      channel: {
        id: message.channel.id,
        name: message.channel.name,
        type: message.channel.type
      },
      guild: message.guild ? {
        id: message.guild.id,
        name: message.guild.name
      } : null,
      attachments: message.attachments.map(att => ({
        id: att.id,
        name: att.name,
        url: att.url,
        size: att.size
      })),
      mentions: {
        users: message.mentions.users.map(user => ({
          id: user.id,
          username: user.username
        })),
        roles: message.mentions.roles.map(role => ({
          id: role.id,
          name: role.name
        })),
        everyone: message.mentions.everyone
      }
    }
  };

  log('debug', `Tin nh·∫Øn m·ªõi t·ª´ ${message.author.username}: ${message.content.substring(0, 50)}...`);
  await sendWebhook(eventData);
});

// Event: Th√†nh vi√™n m·ªõi tham gia
client.on(Events.GuildMemberAdd, async (member) => {
  // Ki·ªÉm tra guild ID n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
  if (config.guildId && member.guild.id !== config.guildId) return;
  
  // Ch·ªâ log member join n·∫øu ƒë∆∞·ª£c b·∫≠t
  if (!config.enableMemberJoinLogging) return;

  const eventData = {
    type: 'member_join',
    timestamp: new Date().toISOString(),
    member: {
      id: member.user.id,
      username: member.user.username,
      displayName: member.user.displayName,
      bot: member.user.bot,
      avatar: member.user.displayAvatarURL(),
      joinedAt: member.joinedAt,
      accountCreatedAt: member.user.createdAt
    },
    guild: {
      id: member.guild.id,
      name: member.guild.name,
      memberCount: member.guild.memberCount
    }
  };

  log('info', `Th√†nh vi√™n m·ªõi tham gia: ${member.user.username} v√†o server ${member.guild.name}`);
  await sendWebhook(eventData);
});

// Event: Th√†nh vi√™n r·ªùi kh·ªèi server
client.on(Events.GuildMemberRemove, async (member) => {
  // Ki·ªÉm tra guild ID n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
  if (config.guildId && member.guild.id !== config.guildId) return;

  const eventData = {
    type: 'member_leave',
    timestamp: new Date().toISOString(),
    member: {
      id: member.user.id,
      username: member.user.username,
      displayName: member.user.displayName,
      bot: member.user.bot
    },
    guild: {
      id: member.guild.id,
      name: member.guild.name,
      memberCount: member.guild.memberCount
    }
  };

  log('info', `Th√†nh vi√™n r·ªùi kh·ªèi server: ${member.user.username} t·ª´ ${member.guild.name}`);
  await sendWebhook(eventData);
});

// Event: Reaction ƒë∆∞·ª£c th√™m v√†o tin nh·∫Øn
client.on(Events.MessageReactionAdd, async (reaction, user) => {
  // B·ªè qua reaction t·ª´ bot
  if (user.bot) return;
  
  // Ki·ªÉm tra guild ID n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
  if (config.guildId && reaction.message.guild?.id !== config.guildId) return;

  const eventData = {
    type: 'reaction_add',
    timestamp: new Date().toISOString(),
    reaction: {
      emoji: {
        name: reaction.emoji.name,
        id: reaction.emoji.id,
        animated: reaction.emoji.animated
      },
      count: reaction.count
    },
    user: {
      id: user.id,
      username: user.username,
      displayName: user.displayName
    },
    message: {
      id: reaction.message.id,
      author: reaction.message.author ? {
        id: reaction.message.author.id,
        username: reaction.message.author.username
      } : null,
      channel: {
        id: reaction.message.channel.id,
        name: reaction.message.channel.name
      }
    },
    guild: reaction.message.guild ? {
      id: reaction.message.guild.id,
      name: reaction.message.guild.name
    } : null
  };

  log('debug', `Reaction m·ªõi: ${user.username} react ${reaction.emoji.name}`);
  await sendWebhook(eventData);
});

// X·ª≠ l√Ω l·ªói v√† warnings
client.on(Events.Error, (error) => {
  log('error', 'Discord client error:', error.message);
  log('debug', 'Error details:', error);
});

client.on(Events.Warn, (warning) => {
  log('warn', 'Discord client warning:', warning);
});

client.on(Events.Debug, (info) => {
  if (config.logLevel === 'debug') {
    log('debug', `Discord debug: ${info}`);
  }
});

// X·ª≠ l√Ω disconnect
client.on(Events.Disconnect, () => {
  log('warn', '‚ö†Ô∏è  Bot b·ªã disconnect t·ª´ Discord');
});

// X·ª≠ l√Ω reconnecting  
client.on(Events.Resuming, () => {
  log('info', 'üîÑ Bot ƒëang reconnecting...');
});

client.on(Events.Ready, () => {
  log('info', '‚úÖ Bot ƒë√£ reconnect th√†nh c√¥ng');
});

// X·ª≠ l√Ω t√≠n hi·ªáu t·∫Øt ·ª©ng d·ª•ng
process.on('SIGINT', () => {
  log('info', 'ƒêang t·∫Øt bot...');
  client.destroy();
  process.exit(0);
});

process.on('SIGTERM', () => {
  log('info', 'ƒêang t·∫Øt bot...');
  client.destroy();
  process.exit(0);
});

// Ki·ªÉm tra c·∫•u h√¨nh tr∆∞·ªõc khi kh·ªüi ƒë·ªông
function validateConfig() {
  log('info', 'ƒêang ki·ªÉm tra c·∫•u h√¨nh...');
  
  if (!config.token) {
    log('error', 'DISCORD_TOKEN kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env');
    log('error', 'Vui l√≤ng th√™m DISCORD_TOKEN=your_bot_token_here v√†o file .env');
    process.exit(1);
  }
  
  if (config.token === 'YOUR_DISCORD_TOKEN_HERE') {
    log('error', 'DISCORD_TOKEN v·∫´n l√† placeholder. Vui l√≤ng thay b·∫±ng token th·∫≠t t·ª´ Discord Developer Portal');
    process.exit(1);
  }
  
  if (!config.webhookUrl) {
    log('warn', 'N8N_WEBHOOK_URL kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh - bot s·∫Ω ch·∫°y nh∆∞ng kh√¥ng g·ª≠i webhook');
  }
  
  log('info', 'C·∫•u h√¨nh h·ª£p l·ªá');
  log('info', `Token length: ${config.token.length} chars`);
  log('info', `Token preview: ${config.token.substring(0, 10)}...`);
  log('debug', 'Webhook URL:', config.webhookUrl);
}

// H√†m kh·ªüi ƒë·ªông bot v·ªõi retry logic
async function startBot() {
  try {
    validateConfig();
    
    log('info', 'ƒêang kh·ªüi ƒë·ªông Discord bot...');
    await client.login(config.token);
    
  } catch (error) {
    log('error', 'Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p Discord bot:');
    log('error', `Error message: ${error.message}`);
    
    if (error.code === 'TokenInvalid') {
      log('error', '‚ùå Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
      log('error', 'üí° Vui l√≤ng ki·ªÉm tra token t·∫°i: https://discord.com/developers/applications');
    } else if (error.code === 'DisallowedIntents') {
      log('error', '‚ùå Bot thi·∫øu permissions ho·∫∑c Privileged Gateway Intents');
      log('error', 'üí° B·∫≠t Message Content Intent t·∫°i Discord Developer Portal > Bot > Privileged Gateway Intents');
    } else if (error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
      log('error', '‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Discord. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng');
    } else {
      log('error', `‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: ${error.code || 'Unknown'}`);
      log('debug', 'Full error:', error);
    }
    
    // Thay v√¨ exit ngay, ƒë·ª£i 5 gi√¢y r·ªìi retry
    log('info', 'üîÑ Th·ª≠ l·∫°i sau 5 gi√¢y...');
    setTimeout(() => {
      process.exit(1);
    }, 5000);
  }
}

// Kh·ªüi ƒë·ªông bot
startBot(); 